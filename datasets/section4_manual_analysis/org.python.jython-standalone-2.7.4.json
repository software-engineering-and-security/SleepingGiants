{
    "tabby": [
        [
            "org.python.bouncycastle.pqc.jcajce.provider.saber.BCSABERPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.saber.BCSABERPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.google.common.collect.LinkedHashMultiset#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultiset",
            "-[CALL]-> org.python.google.common.collect.Multiset#add -[ALIAS]-> org.python.google.common.collect.TreeMultiset#add",
            "-[CALL]-> java.util.Comparator#compare -[ALIAS]-> org.python.apache.commons.io.comparator.SizeFileComparator#compare",
            "-[CALL]-> org.python.apache.commons.io.comparator.SizeFileComparator#compare",
            "-[CALL]-> org.python.apache.commons.io.FileUtils#sizeOfDirectory",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincsplus.BCSPHINCSPlusPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey#populateFromPrivateKeyInfo",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.ASN1Sequence$3#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#parser",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#size -[ALIAS]-> org.python.bouncycastle.asn1.LazyEncodedSequence#size",
            "-[CALL]-> org.python.bouncycastle.asn1.LazyEncodedSequence#force",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readVector",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> org.python.bouncycastle.cms.CMSEnvelopedHelper$CMSDigestAuthenticatedSecureReadable$1#read",
            "-[CALL]-> java.io.OutputStream#write -[ALIAS]-> org.python.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream#write",
            "-[CALL]-> java.io.OutputStream#write -[ALIAS]-> java.io.FileOutputStream#write"
        ],
        [
            "org.python.google.common.cache.LocalCache$ManualSerializationProxy#readObject",
            "-[CALL]-> org.python.google.common.cache.CacheBuilder#build",
            "-[CALL]-> org.python.google.common.cache.LocalCache$LocalManualCache#<init>",
            "-[CALL]-> org.python.google.common.cache.LocalCache#<init>",
            "-[CALL]-> org.python.google.common.base.Supplier#get -[ALIAS]-> org.python.google.common.base.Suppliers$SupplierComposition#get",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__942#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.cert.X509CRLHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.CertificateList#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.icu.text.TimeZoneFormat#readObject",
            "-[CALL]-> org.python.icu.text.TimeZoneNames#getInstance",
            "-[CALL]-> org.python.icu.impl.SoftCache#getInstance",
            "-[CALL]-> org.python.icu.impl.CacheBase#createInstance -[ALIAS]-> org.python.icu.impl.ResourceBundleWrapper$1#createInstance",
            "-[CALL]-> org.python.icu.impl.ResourceBundleWrapper$1#createInstance",
            "-[CALL]-> org.python.icu.impl.ResourceBundleWrapper$Loader#load -[ALIAS]-> org.python.icu.impl.ResourceBundleWrapper$2#load",
            "-[CALL]-> java.lang.ClassLoader#loadClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.cert.X509CertificateHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.Certificate#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.frodo.BCFrodoPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.frodo.BCFrodoPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#read",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.kyber.BCKyberPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.google.common.collect.TreeMultimap#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultimap",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultimap",
            "-[CALL]-> org.python.google.common.collect.Multimap#get -[ALIAS]-> org.python.google.common.collect.FilteredKeyMultimap#get",
            "-[CALL]-> org.python.google.common.base.Predicate#apply -[ALIAS]-> org.python.google.common.base.Predicates$CompositionPredicate#apply",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__942#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.picnic.BCPicnicPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.DERExternalParser#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1StreamParser#readObject",
            "-[CALL]-> java.io.InputStream#read -[ALIAS]-> org.python.google.common.io.MultiInputStream#read",
            "-[CALL]-> org.python.google.common.io.MultiInputStream#advance",
            "-[CALL]-> org.python.google.common.io.ByteSource#openStream -[ALIAS]-> org.python.google.common.io.Resources$UrlByteSource#openStream",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.BERSequenceParser#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1StreamParser#readObject",
            "-[CALL]-> java.io.InputStream#read -[ALIAS]-> org.python.google.common.io.MultiInputStream#read",
            "-[CALL]-> org.python.google.common.io.MultiInputStream#advance",
            "-[CALL]-> org.python.google.common.io.ByteSource#openStream -[ALIAS]-> org.python.google.common.io.Resources$UrlByteSource#openStream",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "java.util.logging.LogRecord#readObject",
            "-[CALL]-> java.util.ResourceBundle#getBundle",
            "-[CALL]-> java.util.ResourceBundle#getBundleImpl",
            "-[CALL]-> java.util.ResourceBundle#getLoader",
            "-[CALL]-> java.security.PrivilegedAction#run -[ALIAS]-> org.python.bouncycastle.jcajce.provider.drbg.DRBG$URLSeededEntropySourceProvider$1#run",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.drbg.DRBG$URLSeededEntropySourceProvider$1#run",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.bike.BCBIKEPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.falcon.BCFalconPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.falcon.BCFalconPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "java.beans.PropertyChangeSupport#readObject",
            "-[CALL]-> java.util.Map$Entry#getValue -[ALIAS]-> org.python.core.SimpleEntry#getValue -[ALIAS]-> org.python.core.PyToJavaMapEntry#getValue",
            "-[CALL]-> org.python.core.AbstractDict#tojava",
            "-[CALL]-> org.python.core.PyObject#__tojava__ -[ALIAS]-> org.python.core.PyInstance#__tojava__",
            "-[CALL]-> org.python.core.PyObject#__call__",
            "-[CALL]-> org.python.core.PyObject#__call__ -[ALIAS]-> org.python.modules.bz2.PyBZ2Compressor$BZ2Compressor_compress_exposer#__call__",
            "-[CALL]-> org.python.modules.bz2.PyBZ2Compressor#BZ2Compressor_compress",
            "-[CALL]-> java.io.OutputStream#write -[ALIAS]-> java.io.FileOutputStream#write"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.BERSetParser#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1StreamParser#readObject",
            "-[CALL]-> java.io.InputStream#read -[ALIAS]-> org.python.google.common.io.MultiInputStream#read",
            "-[CALL]-> org.python.google.common.io.MultiInputStream#advance",
            "-[CALL]-> org.python.google.common.io.ByteSource#openStream -[ALIAS]-> org.python.google.common.io.Resources$UrlByteSource#openStream",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.google.common.collect.Multimaps$CustomSortedSetMultimap#readObject",
            "-[CALL]-> org.python.google.common.base.Supplier#get -[ALIAS]-> org.python.google.common.base.Suppliers$SupplierComposition#get",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__942#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.google.common.collect.EnumMultiset#readObject",
            "-[CALL]-> java.lang.Class#getEnumConstants",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.frodo.BCFrodoPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.google.common.collect.HashMultiset#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultiset",
            "-[CALL]-> org.python.google.common.collect.Multiset#add -[ALIAS]-> org.python.google.common.collect.TreeMultiset#add",
            "-[CALL]-> java.util.Comparator#compare -[ALIAS]-> org.python.apache.commons.io.comparator.SizeFileComparator#compare",
            "-[CALL]-> org.python.apache.commons.io.comparator.SizeFileComparator#compare",
            "-[CALL]-> org.python.apache.commons.io.FileUtils#sizeOfDirectory",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntru.BCNTRUPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.ntru.BCNTRUPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.cert.X509AttributeCertificateHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AttributeCertificate#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "java.security.Provider#readObject",
            "-[CALL]-> java.util.Map$Entry#getKey -[ALIAS]-> org.python.core.SimpleEntry#getKey -[ALIAS]-> org.python.core.PyToJavaMapEntry#getKey",
            "-[CALL]-> org.python.core.AbstractDict#tojava",
            "-[CALL]-> org.python.core.PyObject#__tojava__ -[ALIAS]-> org.python.core.PyInstance#__tojava__",
            "-[CALL]-> org.python.core.PyObject#__call__",
            "-[CALL]-> org.python.core.PyObject#__call__ -[ALIAS]-> org.python.modules.bz2.PyBZ2Compressor$BZ2Compressor_compress_exposer#__call__",
            "-[CALL]-> org.python.modules.bz2.PyBZ2Compressor#BZ2Compressor_compress",
            "-[CALL]-> java.io.OutputStream#write -[ALIAS]-> java.io.FileOutputStream#write"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.falcon.BCFalconPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.ASN1SequenceParser#readObject -[ALIAS]-> org.python.bouncycastle.asn1.DLSequenceParser#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1StreamParser#readObject",
            "-[CALL]-> java.io.InputStream#read -[ALIAS]-> org.python.google.common.io.MultiInputStream#read",
            "-[CALL]-> org.python.google.common.io.MultiInputStream#advance",
            "-[CALL]-> org.python.google.common.io.ByteSource#openStream -[ALIAS]-> org.python.google.common.io.Resources$UrlByteSource#openStream",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.crypto.util.JournaledAlgorithm#readObject",
            "-[CALL]-> org.python.bouncycastle.crypto.util.JournaledAlgorithm#initFromEncoding",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1OctetString#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey#populateFromPrivateKeyInfo",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.google.common.collect.HashMultimap#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultimap",
            "-[CALL]-> org.python.google.common.collect.Multimap#get -[ALIAS]-> org.python.google.common.collect.FilteredKeyMultimap#get",
            "-[CALL]-> org.python.google.common.base.Predicate#apply -[ALIAS]-> org.python.google.common.base.Predicates$CompositionPredicate#apply",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__942#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.cmce.BCCMCEPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.kyber.BCKyberPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AlgorithmIdentifier#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jce.provider.JCEECPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.ASN1SetParser#readObject -[ALIAS]-> org.python.bouncycastle.asn1.DLSetParser#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1StreamParser#readObject",
            "-[CALL]-> java.io.InputStream#read -[ALIAS]-> org.python.google.common.io.MultiInputStream#read",
            "-[CALL]-> org.python.google.common.io.MultiInputStream#advance",
            "-[CALL]-> org.python.google.common.io.ByteSource#openStream -[ALIAS]-> org.python.google.common.io.Resources$UrlByteSource#openStream",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.icu.text.DateFormat#readObject -[ALIAS]-> org.python.icu.text.SimpleDateFormat#readObject",
            "-[CALL]-> org.python.icu.text.SimpleDateFormat#initLocalZeroPaddingNumberFormat",
            "-[CALL]-> org.python.icu.impl.DateNumberFormat#getDigits",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.dilithium.BCDilithiumPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.dilithium.BCDilithiumPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.hqc.BCHQCPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.hqc.BCHQCPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.hqc.BCHQCPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincsplus.BCSPHINCSPlusPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntru.BCNTRUPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.google.common.collect.ArrayListMultimap#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultimap",
            "-[CALL]-> org.python.google.common.collect.Multimap#get -[ALIAS]-> org.python.google.common.collect.FilteredKeyMultimap#get",
            "-[CALL]-> org.python.google.common.base.Predicate#apply -[ALIAS]-> org.python.google.common.base.Predicates$CompositionPredicate#apply",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__942#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.DLSetParser#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1StreamParser#readObject",
            "-[CALL]-> java.io.InputStream#read -[ALIAS]-> org.python.google.common.io.MultiInputStream#read",
            "-[CALL]-> org.python.google.common.io.MultiInputStream#advance",
            "-[CALL]-> org.python.google.common.io.ByteSource#openStream -[ALIAS]-> org.python.google.common.io.Resources$UrlByteSource#openStream",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.icu.text.SimpleDateFormat#readObject",
            "-[CALL]-> org.python.icu.text.SimpleDateFormat#initLocalZeroPaddingNumberFormat",
            "-[CALL]-> org.python.icu.impl.DateNumberFormat#getDigits",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.dilithium.BCDilithiumPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCSNTRUPrimePrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCSNTRUPrimePrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.icu.impl.TimeZoneGenericNames#readObject",
            "-[CALL]-> org.python.icu.impl.TimeZoneGenericNames#init",
            "-[CALL]-> org.python.icu.text.TimeZoneNames#getInstance",
            "-[CALL]-> org.python.icu.impl.SoftCache#getInstance",
            "-[CALL]-> org.python.icu.impl.CacheBase#createInstance -[ALIAS]-> org.python.icu.impl.ResourceBundleWrapper$1#createInstance",
            "-[CALL]-> org.python.icu.impl.ResourceBundleWrapper$1#createInstance",
            "-[CALL]-> org.python.icu.impl.ResourceBundleWrapper$Loader#load -[ALIAS]-> org.python.icu.impl.ResourceBundleWrapper$2#load",
            "-[CALL]-> java.lang.ClassLoader#loadClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCSNTRUPrimePublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.picnic.BCPicnicPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.google.common.cache.LocalCache$LoadingSerializationProxy#readObject",
            "-[CALL]-> org.python.google.common.cache.CacheBuilder#build",
            "-[CALL]-> org.python.google.common.cache.LocalCache$LocalLoadingCache#<init>",
            "-[CALL]-> org.python.google.common.cache.LocalCache#<init>",
            "-[CALL]-> org.python.google.common.base.Supplier#get -[ALIAS]-> org.python.google.common.base.Suppliers$SupplierComposition#get",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__942#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AlgorithmIdentifier#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jce.provider.JCEECPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.saber.BCSABERPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.DLSequenceParser#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1StreamParser#readObject",
            "-[CALL]-> java.io.InputStream#read -[ALIAS]-> org.python.google.common.io.MultiInputStream#read",
            "-[CALL]-> org.python.google.common.io.MultiInputStream#advance",
            "-[CALL]-> org.python.google.common.io.ByteSource#openStream -[ALIAS]-> org.python.google.common.io.Resources$UrlByteSource#openStream",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.bike.BCBIKEPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.bike.BCBIKEPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.google.common.collect.TreeMultiset#readObject",
            "-[CALL]-> org.python.google.common.collect.GeneralRange#all",
            "-[CALL]-> org.python.google.common.collect.GeneralRange#<init>",
            "-[CALL]-> java.util.Comparator#compare -[ALIAS]-> org.python.apache.commons.io.comparator.SizeFileComparator#compare",
            "-[CALL]-> org.python.apache.commons.io.comparator.SizeFileComparator#compare",
            "-[CALL]-> org.python.apache.commons.io.FileUtils#sizeOfDirectory",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.cmce.BCCMCEPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.cmce.BCCMCEPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__527#get",
            "-[CALL]-> java.net.URL#openStream",
            "-[CALL]-> java.net.URL#openConnection"
        ],
        [
            "org.python.bouncycastle.asn1.ASN1Set$3#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#parser",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#size -[ALIAS]-> org.python.bouncycastle.asn1.LazyEncodedSequence#size",
            "-[CALL]-> org.python.bouncycastle.asn1.LazyEncodedSequence#force",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readVector",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#read",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntru.BCNTRUPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.dilithium.BCDilithiumPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCSNTRUPrimePublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.picnic.BCPicnicPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AlgorithmIdentifier#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.saber.BCSABERPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincsplus.BCSPHINCSPlusPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.cert.X509CRLHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.CertificateList#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.asn1.ASN1Sequence$3#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#parser",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#size -[ALIAS]-> org.python.bouncycastle.asn1.LazyEncodedSequence#size",
            "-[CALL]-> org.python.bouncycastle.asn1.LazyEncodedSequence#force",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readVector",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#read",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.cert.X509CertificateHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.Certificate#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.bike.BCBIKEPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.google.common.collect.EnumMultiset#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultiset",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultiset",
            "-[CALL]-> org.python.google.common.collect.Multiset#add -[ALIAS]-> org.python.google.common.collect.TreeMultiset#add",
            "-[CALL]-> java.util.Comparator#compare -[ALIAS]-> org.python.apache.commons.io.comparator.SizeFileComparator#compare",
            "-[CALL]-> org.python.apache.commons.io.comparator.SizeFileComparator#compare",
            "-[CALL]-> org.python.apache.commons.io.FileUtils#sizeOfDirectory",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.frodo.BCFrodoPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.cert.X509AttributeCertificateHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AttributeCertificate#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.falcon.BCFalconPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.crypto.util.JournaledAlgorithm#readObject",
            "-[CALL]-> org.python.bouncycastle.crypto.util.JournaledAlgorithm#initFromEncoding",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1OctetString#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey#populateFromPrivateKeyInfo",
            "-[CALL]-> org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo#parsePrivateKey",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.cmce.BCCMCEPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.kyber.BCKyberPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AlgorithmIdentifier#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.hqc.BCHQCPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.IOUtils$openStream__103#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntru.BCNTRUPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.google.common.collect.ArrayListMultimap#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultimap",
            "-[CALL]-> org.python.google.common.collect.Multimap#get -[ALIAS]-> org.python.google.common.collect.FilteredKeyMultimap#get",
            "-[CALL]-> org.python.google.common.base.Predicate#apply -[ALIAS]-> org.python.google.common.base.Predicates$CompositionPredicate#apply",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__924#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.icu.text.SimpleDateFormat#readObject",
            "-[CALL]-> org.python.icu.text.DateFormat#setBooleanAttribute",
            "-[CALL]-> java.util.AbstractCollection#add -[ALIAS]-> org.python.google.common.collect.Collections2$FilteredCollection#add",
            "-[CALL]-> org.python.google.common.base.Predicate#apply -[ALIAS]-> org.python.google.common.base.Predicates$CompositionPredicate#apply",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__924#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.dilithium.BCDilithiumPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCSNTRUPrimePublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.picnic.BCPicnicPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.google.common.cache.LocalCache$LoadingSerializationProxy#readObject",
            "-[CALL]-> org.python.google.common.cache.CacheBuilder#build",
            "-[CALL]-> org.python.google.common.cache.LocalCache$LocalLoadingCache#<init>",
            "-[CALL]-> org.python.google.common.cache.LocalCache#<init>",
            "-[CALL]-> org.python.google.common.base.Supplier#get -[ALIAS]-> org.python.google.common.base.Suppliers$SupplierComposition#get",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__924#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AlgorithmIdentifier#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.saber.BCSABERPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincsplus.BCSPHINCSPlusPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.google.common.cache.LocalCache$ManualSerializationProxy#readObject",
            "-[CALL]-> org.python.google.common.cache.CacheBuilder#build",
            "-[CALL]-> org.python.google.common.cache.LocalCache$LocalManualCache#<init>",
            "-[CALL]-> org.python.google.common.cache.LocalCache#<init>",
            "-[CALL]-> org.python.google.common.base.Supplier#get -[ALIAS]-> org.python.google.common.base.Suppliers$SupplierComposition#get",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__924#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.cert.X509CRLHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.CertificateList#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.cert.X509CertificateHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.Certificate#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.google.common.collect.TreeMultimap#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultimap",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultimap",
            "-[CALL]-> org.python.google.common.collect.Multimap#get -[ALIAS]-> org.python.google.common.collect.FilteredKeyMultimap#get",
            "-[CALL]-> org.python.google.common.base.Predicate#apply -[ALIAS]-> org.python.google.common.base.Predicates$CompositionPredicate#apply",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__924#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.bike.BCBIKEPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.google.common.collect.Multimaps$CustomSortedSetMultimap#readObject",
            "-[CALL]-> org.python.google.common.base.Supplier#get -[ALIAS]-> org.python.google.common.base.Suppliers$SupplierComposition#get",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__924#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.google.common.collect.EnumMultiset#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultiset",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultiset",
            "-[CALL]-> org.python.google.common.collect.Multiset#add -[ALIAS]-> org.python.google.common.collect.TreeMultiset#add",
            "-[CALL]-> java.util.Comparator#compare -[ALIAS]-> org.python.google.common.collect.Ordering#compare -[ALIAS]-> org.python.google.common.collect.ByFunctionOrdering#compare",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__924#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.frodo.BCFrodoPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.cert.X509AttributeCertificateHolder#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AttributeCertificate#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.falcon.BCFalconPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.crypto.util.JournaledAlgorithm#readObject",
            "-[CALL]-> org.python.bouncycastle.crypto.util.JournaledAlgorithm#initFromEncoding",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1OctetString#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.google.common.collect.HashMultimap#readObject",
            "-[CALL]-> org.python.google.common.collect.Serialization#populateMultimap",
            "-[CALL]-> org.python.google.common.collect.Multimap#get -[ALIAS]-> org.python.google.common.collect.FilteredKeyMultimap#get",
            "-[CALL]-> org.python.google.common.base.Predicate#apply -[ALIAS]-> org.python.google.common.base.Predicates$CompositionPredicate#apply",
            "-[CALL]-> org.python.google.common.base.Function#apply -[ALIAS]-> org.python.google.common.reflect.Types$ParameterizedTypeImpl$typeName__924#apply",
            "-[CALL]-> org.python.google.common.reflect.Types$JavaVersion#typeName -[ALIAS]-> org.python.google.common.reflect.Types$JavaVersion$3#typeName",
            "-[CALL]-> java.lang.reflect.Method#invoke"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.cmce.BCCMCEPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.kyber.BCKyberPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.AlgorithmIdentifier#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.hqc.BCHQCPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.x509.SubjectPublicKeyInfo#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Sequence#getInstance",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1UniversalType#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> java.io.FilterInputStream#available -[ALIAS]-> org.python.apache.commons.io.input.UncheckedFilterInputStream#available",
            "-[CALL]-> org.python.apache.commons.io.function.Uncheck#get",
            "-[CALL]-> org.python.apache.commons.io.function.IOSupplier#get -[ALIAS]-> org.python.apache.commons.io.file.PathUtils$openStream__451#get",
            "-[CALL]-> java.net.URL#openStream"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.crypto.util.JournaledAlgorithm#readObject",
            "-[CALL]-> org.python.bouncycastle.crypto.util.JournaledAlgorithm#initFromEncoding",
            "-[CALL]-> org.python.bouncycastle.crypto.util.JournalingSecureRandom#<init>",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.icu.text.NumberFormat#readObject -[ALIAS]-> org.python.icu.text.DecimalFormat#readObject",
            "-[CALL]-> java.io.ObjectStreamClass#getFields",
            "-[CALL]-> java.io.ObjectStreamClass#getFields",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey#populateFromPrivateKeyInfo",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey#calculateHashCode",
            "-[CALL]-> org.python.bouncycastle.crypto.params.X448PublicKeyParameters#getEncoded",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jce.provider.JCEECPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.icu.text.DateFormat#readObject -[ALIAS]-> org.python.icu.text.SimpleDateFormat#readObject",
            "-[CALL]-> org.python.icu.text.SimpleDateFormat#initLocalZeroPaddingNumberFormat",
            "-[CALL]-> org.python.icu.impl.DateNumberFormat#getDigits",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.dilithium.BCDilithiumPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.dilithium.BCDilithiumPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.hqc.BCHQCPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.hqc.BCHQCPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.sphincsplus.BCSPHINCSPlusPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.sphincsplus.BCSPHINCSPlusPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jce.provider.JDKDSAPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> org.python.bouncycastle.jcajce.io.CipherInputStream#read",
            "-[CALL]-> org.python.bouncycastle.jcajce.io.CipherInputStream#nextChunk",
            "-[CALL]-> javax.crypto.Cipher#update",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.icu.text.SimpleDateFormat#readObject",
            "-[CALL]-> org.python.icu.text.SimpleDateFormat#initLocalZeroPaddingNumberFormat",
            "-[CALL]-> org.python.icu.impl.DateNumberFormat#getDigits",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey#populateFromPubKeyInfo",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.util.ECUtil#getDomainParameters",
            "-[CALL]-> org.python.bouncycastle.crypto.params.ECDomainParameters#<init>",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCSNTRUPrimePrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCSNTRUPrimePrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.icu.impl.TimeZoneGenericNames#readObject",
            "-[CALL]-> org.python.icu.impl.TimeZoneGenericNames#init",
            "-[CALL]-> org.python.icu.text.TimeZoneNames#getInstance",
            "-[CALL]-> org.python.icu.impl.SoftCache#getInstance",
            "-[CALL]-> org.python.icu.impl.CacheBase#createInstance -[ALIAS]-> org.python.icu.impl.ResourceBundleWrapper$1#createInstance",
            "-[CALL]-> org.python.icu.impl.ResourceBundleWrapper$1#createInstance",
            "-[CALL]-> org.python.icu.impl.ResourceBundleWrapper$Loader#load -[ALIAS]-> org.python.icu.impl.ResourceBundleWrapper$2#load",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jce.provider.JCEECPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jce.provider.JCERSAPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> org.python.bouncycastle.jcajce.io.CipherInputStream#read",
            "-[CALL]-> org.python.bouncycastle.jcajce.io.CipherInputStream#nextChunk",
            "-[CALL]-> javax.crypto.Cipher#update",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.bike.BCBIKEPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.bike.BCBIKEPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.cmce.BCCMCEPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.cmce.BCCMCEPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.saber.BCSABERPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.saber.BCSABERPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.icu.text.TimeZoneFormat#readObject",
            "-[CALL]-> org.python.icu.text.TimeZoneNames#getInstance",
            "-[CALL]-> org.python.icu.impl.SoftCache#getInstance",
            "-[CALL]-> org.python.icu.impl.CacheBase#createInstance -[ALIAS]-> org.python.icu.impl.ResourceBundleWrapper$1#createInstance",
            "-[CALL]-> org.python.icu.impl.ResourceBundleWrapper$1#createInstance",
            "-[CALL]-> org.python.icu.impl.ResourceBundleWrapper$Loader#load -[ALIAS]-> org.python.icu.impl.ResourceBundleWrapper$2#load",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.frodo.BCFrodoPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.frodo.BCFrodoPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.kyber.BCKyberPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.kyber.BCKyberPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.picnic.BCPicnicPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.picnic.BCPicnicPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.crypto.params.DSAPublicKeyParameters#<init>",
            "-[CALL]-> org.python.bouncycastle.crypto.params.DSAPublicKeyParameters#validate",
            "-[CALL]-> java.math.BigInteger#modPow",
            "-[CALL]-> java.math.BigInteger#oddModPow",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.falcon.BCFalconPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.falcon.BCFalconPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "java.beans.PropertyChangeSupport#readObject",
            "-[CALL]-> java.util.Map$Entry#getValue -[ALIAS]-> org.python.core.SimpleEntry#getValue -[ALIAS]-> org.python.core.PyToJavaMapEntry#getValue",
            "-[CALL]-> org.python.core.AbstractDict#tojava",
            "-[CALL]-> org.python.core.PyObject#__tojava__ -[ALIAS]-> org.python.core.PyInstance#__tojava__",
            "-[CALL]-> org.python.core.PyObject#__call__ -[ALIAS]-> org.python.core.PyBuiltinFunctionNarrow#__call__ -[ALIAS]-> com.ziclix.python.sql.CursorFunc#__call__",
            "-[CALL]-> com.ziclix.python.sql.PyCursor#execute",
            "-[CALL]-> com.ziclix.python.sql.PyCursor#prepareStatement",
            "-[CALL]-> java.sql.Connection#prepareStatement"
        ],
        [
            "org.python.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey#readObject",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1Primitive#fromByteArray",
            "-[CALL]-> org.python.bouncycastle.asn1.ASN1InputStream#readObject",
            "-[CALL]-> java.io.FilterInputStream#read -[ALIAS]-> javax.crypto.CipherInputStream#read",
            "-[CALL]-> javax.crypto.CipherInputStream#getMoreData",
            "-[CALL]-> javax.crypto.Cipher#doFinal",
            "-[CALL]-> javax.crypto.Cipher#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.google.common.collect.EnumMultiset#readObject",
            "-[CALL]-> java.lang.Class#getEnumConstants",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.icu.text.DecimalFormat#readObject",
            "-[CALL]-> java.io.ObjectStreamClass#getFields",
            "-[CALL]-> java.io.ObjectStreamClass#getFields",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "org.python.bouncycastle.pqc.jcajce.provider.ntru.BCNTRUPrivateKey#readObject",
            "-[CALL]-> org.python.bouncycastle.pqc.jcajce.provider.ntru.BCNTRUPrivateKey#init",
            "-[CALL]-> org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory#createKey",
            "-[CALL]-> org.python.bouncycastle.pqc.asn1.XMSSPrivateKey#getPublicSeed",
            "-[CALL]-> org.python.bouncycastle.util.Arrays#clone",
            "-[CALL]-> java.lang.Object#clone -[ALIAS]-> javax.crypto.Mac#clone",
            "-[CALL]-> javax.crypto.Mac#chooseFirstProvider",
            "-[CALL]-> java.security.Provider$Service#newInstance",
            "-[CALL]-> java.security.Provider$Service#newInstanceUtil",
            "-[CALL]-> java.security.Provider$Service#getImplClass",
            "-[CALL]-> java.lang.ClassLoader#loadClass"
        ],
        [
            "java.security.Provider#readObject",
            "-[CALL]-> java.util.Map$Entry#getKey -[ALIAS]-> org.python.core.SimpleEntry#getKey -[ALIAS]-> org.python.core.PyToJavaMapEntry#getKey",
            "-[CALL]-> org.python.core.AbstractDict#tojava",
            "-[CALL]-> org.python.core.PyObject#__tojava__ -[ALIAS]-> org.python.core.PyInstance#__tojava__",
            "-[CALL]-> org.python.core.PyObject#__call__ -[ALIAS]-> org.python.core.PyBuiltinFunctionNarrow#__call__ -[ALIAS]-> com.ziclix.python.sql.CursorFunc#__call__",
            "-[CALL]-> com.ziclix.python.sql.PyCursor#execute",
            "-[CALL]-> com.ziclix.python.sql.PyCursor#prepareStatement",
            "-[CALL]-> java.sql.Connection#prepareStatement"
        ]
    ],
    "androChain": [
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyMethod: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.reflect.Method, java.lang.Object[]] and taint: [true, true, true, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [org.python.core.PyMethod, java.lang.Object[]] and taint: [true, true, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyFunction: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.reflect.Method, java.lang.Object[]] and taint: [true, true, true, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [org.python.core.PyFunction, java.lang.Object[]] and taint: [true, true, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.jline.console.history.FileHistory: void flush()> with actual argTypes: [] and taint: [true]",
            "<java.io.FileOutputStream: void <init>(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, true]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.JavaProxyList$14: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.PyIterator$1: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyInstance: java.lang.Object __tojava__(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<org.python.core.JavaProxyMap$27: org.python.core.PyObject __call__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyInstance, org.python.core.PyType] and taint: [true, true, false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.imap$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyBuiltinMethodNarrow: org.python.core.PyObject __call__(org.python.core.PyObject[])> with actual argTypes: [org.python.core.PyObject[]] and taint: [true, true]",
            "<org.python.core.JavaProxyMap$27: org.python.core.PyObject __call__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject, org.python.core.PyObject] and taint: [true, true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.imap$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyBuiltinMethodNarrow: org.python.core.PyObject __call__(org.python.core.PyObject[])> with actual argTypes: [org.python.core.PyObject[]] and taint: [true, true]",
            "<org.python.core.JavaProxyList$14: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.imap$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyBuiltinMethodNarrow: org.python.core.PyObject __call__(org.python.core.PyObject[])> with actual argTypes: [org.python.core.PyObject[]] and taint: [true, true]",
            "<org.python.core.PyJavaType$14: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.imap$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyBuiltinMethodNarrow: org.python.core.PyObject __call__(org.python.core.PyObject[])> with actual argTypes: [org.python.core.PyObject[]] and taint: [true, true]",
            "<org.python.core.JavaProxyMap$25: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.JavaProxyMap$27: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<org.python.core.JavaProxyMap$27: org.python.core.PyObject __call__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject, null] and taint: [true, true, false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.PyIterator$1: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyObject: java.lang.Object __tojava__(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<org.python.core.PyObject: java.lang.Object getJavaProxy()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyObject: void proxyInit()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.antlr.op.ModDerived: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyObject: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.connect.Connectx: org.python.core.PyObject __call__(org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false]",
            "<com.ziclix.python.sql.connect.Connectx: void invoke(java.lang.Object,java.lang.String,java.lang.Object)> with actual argTypes: [java.lang.Object, java.lang.String, java.lang.Object] and taint: [true, false, true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, false, false]"
        ],
        [
            "<java.security.SignedObject: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.bouncycastle.x509.X509CRLStoreSelector: java.lang.Object clone()> with actual argTypes: [] and taint: [true]",
            "<org.python.bouncycastle.x509.X509CRLStoreSelector: org.python.bouncycastle.x509.X509CRLStoreSelector getInstance(java.security.cert.X509CRLSelector)> with actual argTypes: [org.python.bouncycastle.x509.X509CRLStoreSelector] and taint: [false, true]",
            "<java.security.cert.X509CRLSelector: void setIssuerNames(java.util.Collection)> with actual argTypes: [java.util.Collection] and taint: [false, true]",
            "<java.security.cert.X509CRLSelector: java.util.HashSet parseIssuerNames(java.util.Collection)> with actual argTypes: [java.util.HashSet] and taint: [false, true]",
            "<sun.security.x509.X500Name: javax.security.auth.x500.X500Principal asX500Principal()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.PyIterator$1: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyMethod: java.lang.Object __tojava__(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<org.python.core.PyMethod: java.lang.Object proxy(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)> with actual argTypes: [java.lang.ClassLoader, java.lang.Class[], org.python.core.PyMethod] and taint: [false, false, false, true]",
            "<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.Class,java.lang.reflect.Constructor,java.lang.reflect.InvocationHandler)> with actual argTypes: [java.lang.Class, java.lang.reflect.Constructor, java.lang.reflect.InvocationHandler] and taint: [false, false, false, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.antlr.op.ModDerived: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyObject: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.bz2.PyBZ2File$BZ2File___init___exposer: org.python.core.PyObject __call__(org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false]",
            "<org.python.modules.bz2.PyBZ2File: void BZ2File___init__(org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false]",
            "<org.python.modules.bz2.PyBZ2File: void BZ2File___init__(org.python.core.PyString,java.lang.String,int,int)> with actual argTypes: [org.python.core.PyString, java.lang.String, int, int] and taint: [true, false, true, false, false]",
            "<java.io.FileOutputStream: void <init>(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.antlr.op.ModDerived: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.CursorFunc: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.PyCursor: org.python.core.PyObject nextset()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.PyCursor: void updateAttributes(int)> with actual argTypes: [int] and taint: [true, true]",
            "<com.ziclix.python.sql.handler.RowIdHandler: org.python.core.PyObject getRowId(java.sql.Statement)> with actual argTypes: [java.sql.Statement] and taint: [true, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.sql.Statement, java.lang.Object[]] and taint: [true, true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.zipimport.zipimporter$zipimporter_get_code_exposer: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<org.python.modules.zipimport.zipimporter: org.python.core.PyObject zipimporter_get_code(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<org.python.core.util.importer: org.python.core.util.importer$ModuleCodeData getModuleCode(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<org.python.core.BytecodeLoader: org.python.core.PyCode makeCode(java.lang.String,byte[],java.lang.String)> with actual argTypes: [java.lang.String, byte[], java.lang.String] and taint: [false, true, true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, true]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.PyIterator$1: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyInstance: java.lang.Object __tojava__(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<org.python.core.PyType$type___setattr___exposer: org.python.core.PyObject __call__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyInstance, org.python.core.PyType] and taint: [true, true, false]",
            "<org.python.core.PyType: void type___setattr__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject, org.python.core.PyObject] and taint: [true, true, false]",
            "<org.python.core.PyJavaType: void type___setattr__(java.lang.String,org.python.core.PyObject)> with actual argTypes: [java.lang.String, org.python.core.PyObject] and taint: [true, true, false]",
            "<org.python.core.PyBeanProperty: boolean _doset(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [null, org.python.core.PyObject] and taint: [true, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, true, true]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.PyIterator$1: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyInstance: java.lang.Object __tojava__(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<org.python.core.PyType$type___setattr___exposer: org.python.core.PyObject __call__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyInstance, org.python.core.PyType] and taint: [true, true, false]",
            "<org.python.core.PyType: void type___setattr__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject, org.python.core.PyObject] and taint: [true, true, false]",
            "<org.python.core.PyJavaType: void type___setattr__(java.lang.String,org.python.core.PyObject)> with actual argTypes: [java.lang.String, org.python.core.PyObject] and taint: [true, true, false]",
            "<org.python.core.PyBeanEvent: boolean _doset(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [null, org.python.core.PyObject] and taint: [true, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, true, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.antlr.op.ModDerived: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyObject: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyFile$file___init___exposer: org.python.core.PyObject __call__(org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false]",
            "<org.python.core.PyFile: void file___init__(org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false]",
            "<org.python.core.io.FileIO: void <init>(org.python.core.PyString,java.lang.String)> with actual argTypes: [org.python.core.PyString, java.lang.String] and taint: [false, false, true]",
            "<org.python.core.io.FileIO: void fromFileOutputStream(java.io.File)> with actual argTypes: [org.python.core.util.RelativeFile] and taint: [false, false]",
            "<java.io.FileOutputStream: void <init>(java.io.File,boolean)> with actual argTypes: [java.io.File, boolean] and taint: [false, false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.antlr.op.ModDerived: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.CursorFunc: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.PyCursor: org.python.core.PyObject nextset()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.PyCursor: void updateAttributes(int)> with actual argTypes: [int] and taint: [true, true]",
            "<com.ziclix.python.sql.handler.RowIdHandler: org.python.core.PyObject getRowId(java.sql.Statement)> with actual argTypes: [java.sql.Statement] and taint: [true, true]",
            "<com.ziclix.python.sql.handler.RowIdHandler: org.python.core.PyObject getRowId(java.sql.Statement)> with actual argTypes: [java.sql.Statement] and taint: [true, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.sql.Statement, java.lang.Object[]] and taint: [true, true, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void close()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void finish()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.compress.java.util.jar.Pack200: org.python.apache.commons.compress.java.util.jar.Pack200$Packer newPacker()> with actual argTypes: [] and taint: [false]",
            "<org.python.apache.commons.compress.java.util.jar.Pack200: java.lang.Object newInstance(java.lang.String,java.lang.String)> with actual argTypes: [java.lang.String, java.lang.String] and taint: [false, false, false]",
            "<org.python.apache.commons.compress.java.util.jar.Pack200: java.lang.Object lambda$newInstance$0(java.lang.String,java.lang.String)> with actual argTypes: [java.lang.String, java.lang.String] and taint: [false, false, false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.util.BCPFunc: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<com.ziclix.python.sql.util.BCP: org.python.core.PyObject bcp(java.lang.String,java.lang.String,org.python.core.PyObject,org.python.core.PyObject,org.python.core.PyObject,java.lang.String,org.python.core.PyObject)> with actual argTypes: [java.lang.String, null, org.python.core.PyObject, org.python.core.PyObject, org.python.core.PyObject, null, org.python.core.PyObject] and taint: [true, true, false, false, false, false, false, false]",
            "<com.ziclix.python.sql.pipe.db.DBSource: void <init>(com.ziclix.python.sql.PyConnection,java.lang.Class,java.lang.String,java.lang.String,org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [com.ziclix.python.sql.PyConnection, java.lang.Class, java.lang.String, java.lang.String, org.python.core.PyObject, org.python.core.PyObject] and taint: [false, true, true, true, false, false, false]",
            "<com.ziclix.python.sql.pipe.db.BaseDB: void <init>(com.ziclix.python.sql.PyConnection,java.lang.Class,java.lang.String)> with actual argTypes: [com.ziclix.python.sql.PyConnection, java.lang.Class, java.lang.String] and taint: [false, true, true, true]",
            "<com.ziclix.python.sql.pipe.db.BaseDB: com.ziclix.python.sql.PyCursor cursor()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, true]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.JavaProxyList$1: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<org.python.core.SequenceIndexDelegate: org.python.core.PyObject checkIdxAndGetItem(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [false, true]",
            "<org.python.core.SequenceIndexDelegate: org.python.core.PyObject checkIdxAndFindItem(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [false, true]",
            "<org.python.core.SequenceIndexDelegate: org.python.core.PyObject getSlice(org.python.core.PySlice)> with actual argTypes: [org.python.core.PySlice] and taint: [false, true]",
            "<org.python.core.JavaProxyList$ListIndexDelegate: org.python.core.PyObject getSlice(int,int,int)> with actual argTypes: [int, int, int] and taint: [false, true, true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.PyIterator$1: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyInstance: java.lang.Object __tojava__(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<org.python.core.PyType$type___setattr___exposer: org.python.core.PyObject __call__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyInstance, org.python.core.PyType] and taint: [true, true, false]",
            "<org.python.core.PyType: void type___setattr__(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject, org.python.core.PyObject] and taint: [true, true, false]",
            "<org.python.core.PyJavaType: void type___setattr__(java.lang.String,org.python.core.PyObject)> with actual argTypes: [java.lang.String, org.python.core.PyObject] and taint: [true, true, false]",
            "<org.python.core.PyBeanProperty: boolean _doset(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [null, org.python.core.PyObject] and taint: [true, false, false]",
            "<org.python.core.PyBeanProperty: boolean _doset(org.python.core.PyObject,org.python.core.PyObject)> with actual argTypes: [null, org.python.core.PyObject] and taint: [true, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, true, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.compress.archivers.zip.ZipSplitOutputStream: void close()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.compress.archivers.zip.ZipSplitOutputStream: void finish()> with actual argTypes: [] and taint: [true]",
            "<java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]] and taint: [false, true, true, false]",
            "<java.nio.file.CopyMoveHelper: void moveToForeignTarget(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]] and taint: [false, true, true, false]",
            "<java.nio.file.CopyMoveHelper: void copyToForeignTarget(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]] and taint: [false, true, true, false]",
            "<java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])> with actual argTypes: [java.io.InputStream, java.nio.file.Path, java.nio.file.CopyOption[]] and taint: [false, true, true, false]",
            "<java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.OpenOption[]] and taint: [false, true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.zipimport.zipimporter$zipimporter_get_code_exposer: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<org.python.modules.zipimport.zipimporter: org.python.core.PyObject zipimporter_get_code(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<org.python.core.util.importer: org.python.core.util.importer$ModuleCodeData getModuleCode(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<org.python.core.BytecodeLoader: org.python.core.PyCode makeCode(java.lang.String,byte[],java.lang.String)> with actual argTypes: [java.lang.String, byte[], java.lang.String] and taint: [false, true, true, true]",
            "<org.python.core.BytecodeLoader: java.lang.Class makeClass(java.lang.String,byte[],java.lang.Class[])> with actual argTypes: [java.lang.String, byte[], java.lang.Class[]] and taint: [false, true, true, false]",
            "<org.python.core.BytecodeLoader$Loader: java.lang.Class loadClassFromBytes(java.lang.String,byte[])> with actual argTypes: [java.lang.String, byte[]] and taint: [false, true, true]",
            "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)> with actual argTypes: [java.lang.String, byte[], int, int, java.security.ProtectionDomain] and taint: [false, true, true, false, true, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.antlr.op.ModDerived: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.ExtendedCursorFunc: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<com.ziclix.python.sql.PyExtendedCursor: void typeinfo(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, false]",
            "<com.ziclix.python.sql.DynamicFetch: void add(java.sql.ResultSet,java.util.Set)> with actual argTypes: [java.sql.ResultSet, java.util.HashSet] and taint: [true, true, false]",
            "<com.sun.rowset.JdbcRowSetImpl: java.sql.ResultSetMetaData getMetaData()> with actual argTypes: [] and taint: [true]",
            "<com.sun.rowset.JdbcRowSetImpl: java.sql.PreparedStatement prepare()> with actual argTypes: [] and taint: [false]",
            "<com.sun.rowset.JdbcRowSetImpl: java.sql.Connection connect()> with actual argTypes: [] and taint: [false]",
            "<javax.naming.InitialContext: java.lang.Object lookup(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<javax.naming.Context: java.lang.Object lookup(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: void run()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.CombinedChannelDuplexHandler$1: org.python.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, false]",
            "<org.python.netty.handler.ssl.SslHandler: void exceptionCaught(org.python.netty.channel.ChannelHandlerContext,java.lang.Throwable)> with actual argTypes: [org.python.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext, java.lang.Throwable] and taint: [true, true, false]",
            "<org.python.netty.channel.socket.nio.NioDatagramChannel: boolean isActive()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.socket.DefaultDatagramChannelConfig: java.lang.Object getOption(org.python.netty.channel.ChannelOption)> with actual argTypes: [org.python.netty.channel.ChannelOption] and taint: [true, false]",
            "<org.python.netty.channel.socket.nio.NioDatagramChannelConfig: boolean isLoopbackModeDisabled()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.socket.nio.NioDatagramChannelConfig: java.lang.Object getOption0(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.nio.channels.DatagramChannel, java.lang.Object[]] and taint: [false, true, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.filefilter.IOFileFilter: boolean matches(java.nio.file.Path)> with actual argTypes: [java.nio.file.Path] and taint: [true, true]",
            "<org.python.apache.commons.io.filefilter.PathVisitorFileFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)> with actual argTypes: [java.nio.file.Path, null] and taint: [true, true, false]",
            "<org.python.apache.commons.io.filefilter.AbstractFileFilter: java.nio.file.FileVisitResult get(org.python.apache.commons.io.function.IOSupplier)> with actual argTypes: [org.python.apache.commons.io.function.IOSupplier] and taint: [true, true]",
            "<org.python.apache.commons.io.output.UncheckedFilterOutputStream$Builder: java.lang.Object get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.output.UncheckedFilterOutputStream$Builder: org.python.apache.commons.io.output.UncheckedFilterOutputStream get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.build.AbstractStreamBuilder: java.io.OutputStream getOutputStream()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.build.AbstractOrigin: java.io.OutputStream getOutputStream(java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.OpenOption[]] and taint: [true, true]",
            "<java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.OpenOption[]] and taint: [false, true, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.filefilter.IOFileFilter: boolean matches(java.nio.file.Path)> with actual argTypes: [java.nio.file.Path] and taint: [true, true]",
            "<org.python.apache.commons.io.filefilter.PathVisitorFileFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)> with actual argTypes: [java.nio.file.Path, null] and taint: [true, true, false]",
            "<org.python.apache.commons.io.filefilter.AbstractFileFilter: java.nio.file.FileVisitResult get(org.python.apache.commons.io.function.IOSupplier)> with actual argTypes: [org.python.apache.commons.io.function.IOSupplier] and taint: [true, true]",
            "<org.python.apache.commons.io.output.UncheckedFilterWriter$Builder: java.lang.Object get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.output.UncheckedFilterWriter$Builder: org.python.apache.commons.io.output.UncheckedFilterWriter get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.build.AbstractStreamBuilder: java.io.Writer getWriter()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.build.AbstractOrigin: java.io.Writer getWriter(java.nio.charset.Charset,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.charset.Charset, java.nio.file.OpenOption[]] and taint: [true, true, true]",
            "<java.nio.file.Files: java.io.BufferedWriter newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[]] and taint: [false, true, true, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.input.SwappedDataInputStream: byte readByte()> with actual argTypes: [] and taint: [true]",
            "<org.python.util.ConsoleInputStream: int read()> with actual argTypes: [] and taint: [true]",
            "<org.python.util.ConsoleInputStream: void fillBuffer()> with actual argTypes: [] and taint: [true]",
            "<org.python.util.JLineConsole$Stream: java.lang.CharSequence getLine()> with actual argTypes: [] and taint: [true]",
            "<org.python.util.JLineConsole: java.lang.String access$100(org.python.util.JLineConsole,java.lang.String)> with actual argTypes: [org.python.util.JLineConsole, java.lang.String] and taint: [false, true, true]",
            "<org.python.util.JLineConsole: java.lang.String readerReadLine(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<org.python.jline.OSvTerminal: void init()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, true, false]"
        ],
        [
            "<org.python.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.bouncycastle.asn1.ASN1InputStream: org.python.bouncycastle.asn1.ASN1Primitive readObject()> with actual argTypes: [] and taint: [false]",
            "<java.io.FilterInputStream: int read()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.ConsoleInputStream: int read()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.ConsoleInputStream: void fillBuffer()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.JLineConsole$Stream: java.lang.CharSequence getLine()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.JLineConsole: java.lang.String access$100(org.python.util.JLineConsole,java.lang.String)> with actual argTypes: [org.python.util.JLineConsole, java.lang.String] and taint: [false, false, false]",
            "<org.python.util.JLineConsole: java.lang.String readerReadLine(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<org.python.jline.OSvTerminal: void init()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<javax.management.ImmutableDescriptor: java.lang.Object readResolve()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.comparator.SizeFileComparator: int compare(java.lang.Object,java.lang.Object)> with actual argTypes: [java.lang.String, java.lang.String] and taint: [false, true, true]",
            "<org.python.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)> with actual argTypes: [java.io.File, java.io.File] and taint: [false, true, true]",
            "<org.python.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, true]",
            "<org.python.apache.commons.io.function.Uncheck: java.lang.Object get(org.python.apache.commons.io.function.IOSupplier)> with actual argTypes: [org.python.apache.commons.io.function.IOSupplier] and taint: [false, true]",
            "<org.python.apache.commons.io.output.UncheckedFilterOutputStream$Builder: java.lang.Object get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.output.UncheckedFilterOutputStream$Builder: org.python.apache.commons.io.output.UncheckedFilterOutputStream get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.build.AbstractStreamBuilder: java.io.OutputStream getOutputStream()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.build.AbstractOrigin: java.io.OutputStream getOutputStream(java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.OpenOption[]] and taint: [true, true]",
            "<java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.OpenOption[]] and taint: [false, true, true]"
        ],
        [
            "<javax.management.ImmutableDescriptor: java.lang.Object readResolve()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.comparator.SizeFileComparator: int compare(java.lang.Object,java.lang.Object)> with actual argTypes: [java.lang.String, java.lang.String] and taint: [false, true, true]",
            "<org.python.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)> with actual argTypes: [java.io.File, java.io.File] and taint: [false, true, true]",
            "<org.python.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, true]",
            "<org.python.apache.commons.io.function.Uncheck: java.lang.Object get(org.python.apache.commons.io.function.IOSupplier)> with actual argTypes: [org.python.apache.commons.io.function.IOSupplier] and taint: [false, true]",
            "<org.python.apache.commons.io.output.UncheckedFilterWriter$Builder: java.lang.Object get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.output.UncheckedFilterWriter$Builder: org.python.apache.commons.io.output.UncheckedFilterWriter get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.build.AbstractStreamBuilder: java.io.Writer getWriter()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.build.AbstractOrigin: java.io.Writer getWriter(java.nio.charset.Charset,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.charset.Charset, java.nio.file.OpenOption[]] and taint: [true, true, true]",
            "<java.nio.file.Files: java.io.BufferedWriter newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[]] and taint: [false, true, true, true]"
        ],
        [
            "<org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePrivateKey: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePrivateKey: void init(org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo)> with actual argTypes: [org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo] and taint: [true, true]",
            "<org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory: org.python.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo)> with actual argTypes: [org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo] and taint: [false, true]",
            "<org.python.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters: org.python.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters getInstance(java.lang.Object)> with actual argTypes: [byte[]] and taint: [false, true]",
            "<org.python.apache.commons.io.input.TeeInputStream: void close()> with actual argTypes: [] and taint: [false]",
            "<org.python.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void close()> with actual argTypes: [] and taint: [false]",
            "<org.python.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void finish()> with actual argTypes: [] and taint: [false]",
            "<org.python.apache.commons.compress.java.util.jar.Pack200: org.python.apache.commons.compress.java.util.jar.Pack200$Packer newPacker()> with actual argTypes: [] and taint: [false]",
            "<org.python.apache.commons.compress.java.util.jar.Pack200: java.lang.Object newInstance(java.lang.String,java.lang.String)> with actual argTypes: [java.lang.String, java.lang.String] and taint: [false, false, false]",
            "<org.python.apache.commons.compress.java.util.jar.Pack200: java.lang.Object lambda$newInstance$0(java.lang.String,java.lang.String)> with actual argTypes: [java.lang.String, java.lang.String] and taint: [false, false, false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.zipimport.zipimporter$zipimporter_get_code_exposer: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<org.python.modules.zipimport.zipimporter: org.python.core.PyObject zipimporter_get_code(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<org.python.core.util.importer: org.python.core.util.importer$ModuleCodeData getModuleCode(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<org.python.core.imp: byte[] compileSource(java.lang.String,java.io.InputStream,java.lang.String)> with actual argTypes: [java.lang.String, java.io.InputStream, java.lang.String] and taint: [false, true, true, true]",
            "<org.python.core.imp: byte[] compileSource(java.lang.String,java.io.InputStream,java.lang.String,long)> with actual argTypes: [java.lang.String, java.io.InputStream, java.lang.String, long] and taint: [false, true, true, true, false]",
            "<org.python.compiler.Module: void compile(org.python.antlr.base.mod,java.io.OutputStream,java.lang.String,java.lang.String,boolean,boolean,org.python.core.CompilerFlags,long)> with actual argTypes: [org.python.antlr.base.mod, java.io.ByteArrayOutputStream, java.lang.String, java.lang.String, int, int, null, long] and taint: [false, true, false, true, true, false, false, false, false]",
            "<org.python.compiler.Module: org.python.core.PyBytecode loadPyBytecode(java.lang.String,boolean)> with actual argTypes: [java.lang.String, int] and taint: [false, false, false]",
            "<java.lang.Runtime: java.lang.Process exec(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<javax.swing.JFormattedTextField$FocusLostHandler: void run()> with actual argTypes: [] and taint: [true]",
            "<javax.swing.JFormattedTextField: void commitEdit()> with actual argTypes: [] and taint: [true]",
            "<javax.swing.text.DefaultFormatter: java.lang.Object stringToValue(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, true]"
        ],
        [
            "<javax.management.ImmutableDescriptor: java.lang.Object readResolve()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.comparator.SizeFileComparator: int compare(java.lang.Object,java.lang.Object)> with actual argTypes: [java.lang.String, java.lang.String] and taint: [false, true, true]",
            "<org.python.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)> with actual argTypes: [java.io.File, java.io.File] and taint: [false, true, true]",
            "<org.python.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, true]",
            "<org.python.apache.commons.io.function.Uncheck: java.lang.Object get(org.python.apache.commons.io.function.IOSupplier)> with actual argTypes: [org.python.apache.commons.io.function.IOSupplier] and taint: [false, true]",
            "<org.python.apache.commons.io.output.FileWriterWithEncoding$Builder: java.lang.Object get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.output.FileWriterWithEncoding$Builder: org.python.apache.commons.io.output.FileWriterWithEncoding get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.output.FileWriterWithEncoding: java.io.OutputStreamWriter access$000(java.io.File,java.lang.Object,boolean)> with actual argTypes: [java.io.File, java.lang.Object, boolean] and taint: [false, true, true, true]",
            "<org.python.apache.commons.io.output.FileWriterWithEncoding: java.io.OutputStreamWriter initWriter(java.io.File,java.lang.Object,boolean)> with actual argTypes: [java.io.File, java.lang.Object, boolean] and taint: [false, true, true, true]",
            "<org.python.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, false]",
            "<java.io.File: boolean delete()> with actual argTypes: [] and taint: [false]"
        ],
        [
            "<org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePrivateKey: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.bouncycastle.pqc.jcajce.provider.ntruprime.BCNTRULPRimePrivateKey: void init(org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo)> with actual argTypes: [org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo] and taint: [true, true]",
            "<org.python.bouncycastle.pqc.crypto.util.PrivateKeyFactory: org.python.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo)> with actual argTypes: [org.python.bouncycastle.asn1.pkcs.PrivateKeyInfo] and taint: [false, true]",
            "<org.python.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters: org.python.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters getInstance(java.lang.Object)> with actual argTypes: [byte[]] and taint: [false, true]",
            "<org.python.apache.commons.io.input.TeeInputStream: void close()> with actual argTypes: [] and taint: [false]",
            "<org.python.apache.commons.compress.archivers.zip.ZipSplitOutputStream: void close()> with actual argTypes: [] and taint: [false]",
            "<org.python.apache.commons.compress.archivers.zip.ZipSplitOutputStream: void finish()> with actual argTypes: [] and taint: [false]",
            "<java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]] and taint: [false, false, false, false]",
            "<java.nio.file.CopyMoveHelper: void moveToForeignTarget(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]] and taint: [false, false, false, false]",
            "<java.nio.file.CopyMoveHelper: void copyToForeignTarget(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]] and taint: [false, false, false, false]",
            "<java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])> with actual argTypes: [java.io.InputStream, java.nio.file.Path, java.nio.file.CopyOption[]] and taint: [false, false, false, false]",
            "<java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.OpenOption[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.BuiltinFunctions: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<org.python.core.__builtin__: org.python.core.PyObject reload(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [false, true]",
            "<org.python.core.__builtin__: org.python.core.PyObject reload(org.python.core.PyModule)> with actual argTypes: [org.python.core.PyModule] and taint: [false, true]",
            "<org.python.core.imp: org.python.core.PyObject reload(org.python.core.PyModule)> with actual argTypes: [org.python.core.PyModule] and taint: [false, true]",
            "<org.python.core.imp: org.python.core.PyObject _reload(org.python.core.PyModule,org.python.core.PyObject,java.util.Map)> with actual argTypes: [org.python.core.PyModule, org.python.core.PyObject, java.util.Map] and taint: [false, true, false, false]",
            "<org.python.core.imp: org.python.core.PyObject find_module(java.lang.String,java.lang.String,org.python.core.PyList)> with actual argTypes: [java.lang.String, java.lang.String, org.python.core.PyList] and taint: [false, true, true, true]",
            "<org.python.core.imp: org.python.core.PyObject loadBuiltin(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.python.core.imp: org.python.core.PyObject createFromClass(java.lang.String,java.lang.Class)> with actual argTypes: [java.lang.String, java.lang.Class] and taint: [false, true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.posix.PosixModule$FstatFunction: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<jnr.posix.LazyPOSIX: jnr.posix.FileStat fstat(int)> with actual argTypes: [int] and taint: [false, true]",
            "<jnr.posix.LazyPOSIX: jnr.posix.POSIX posix()> with actual argTypes: [] and taint: [false]",
            "<jnr.posix.LazyPOSIX: jnr.posix.POSIX loadPOSIX()> with actual argTypes: [] and taint: [false]",
            "<jnr.posix.POSIXFactory: jnr.posix.POSIX loadPOSIX(jnr.posix.POSIXHandler,boolean)> with actual argTypes: [jnr.posix.POSIXHandler, boolean] and taint: [false, false, false]",
            "<jnr.posix.POSIXFactory: jnr.posix.POSIX loadNativePOSIX(jnr.posix.POSIXHandler)> with actual argTypes: [jnr.posix.POSIXHandler] and taint: [false, false]",
            "<jnr.posix.POSIXFactory: jnr.posix.POSIX loadFreeBSDPOSIX(jnr.posix.POSIXHandler)> with actual argTypes: [jnr.posix.POSIXHandler] and taint: [false, false]",
            "<jnr.posix.FreeBSDPOSIX: void <init>(jnr.posix.LibCProvider,jnr.posix.POSIXHandler)> with actual argTypes: [jnr.posix.LibCProvider, jnr.posix.POSIXHandler] and taint: [false, false, false]",
            "<java.lang.Runtime: java.lang.Process exec(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask$AdaptedRunnableAction: void run()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask: java.lang.Object invoke()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask: void reportException(int)> with actual argTypes: [int] and taint: [true, true]",
            "<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, true]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask$AdaptedRunnableAction: void run()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask: java.lang.Object invoke()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask: void reportException(int)> with actual argTypes: [int] and taint: [true, true]",
            "<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.antlr.op.ModDerived: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyObject: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyNewWrapper: org.python.core.PyObject __call__(org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false]",
            "<org.python.modules.jffi.CType$Array$exposed___new__: org.python.core.PyObject new_impl(boolean,org.python.core.PyType,org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [int, org.python.core.PyType, org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false, false, false]",
            "<org.python.modules.jffi.CType$Array: org.python.core.PyObject Array_new(org.python.core.PyNewWrapper,boolean,org.python.core.PyType,org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.modules.jffi.CType$Array$exposed___new__, boolean, org.python.core.PyType, org.python.core.PyObject[], java.lang.String[]] and taint: [false, true, false, false, false, false]",
            "<org.python.modules.jffi.CType$Array: void <init>(org.python.core.PyType,org.python.modules.jffi.CType,int)> with actual argTypes: [org.python.core.PyType, org.python.modules.jffi.CType, int] and taint: [false, false, false, false]",
            "<com.kenai.jffi.Array: void <init>(com.kenai.jffi.Type,int)> with actual argTypes: [com.kenai.jffi.Type, int] and taint: [false, false, false]",
            "<com.kenai.jffi.Aggregate: void <init>(com.kenai.jffi.Foreign,long)> with actual argTypes: [com.kenai.jffi.Foreign, long] and taint: [false, false, false]",
            "<com.kenai.jffi.internal.Cleaner: java.lang.Runnable register(java.lang.Object,java.lang.Runnable)> with actual argTypes: [com.kenai.jffi.Aggregate, com.kenai.jffi.Aggregate$1] and taint: [false, false, false]",
            "<com.kenai.jffi.internal.Cleaner: java.lang.Object getCleaner(java.lang.Object,java.lang.Runnable)> with actual argTypes: [java.lang.Object, java.lang.Runnable] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [null, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.antlr.op.ModDerived: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyObject: org.python.core.PyObject __call__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.PyNewWrapper: org.python.core.PyObject __call__(org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false]",
            "<org.python.modules.jffi.CType$Array$exposed___new__: org.python.core.PyObject new_impl(boolean,org.python.core.PyType,org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [int, org.python.core.PyType, org.python.core.PyObject[], java.lang.String[]] and taint: [true, false, false, false, false]",
            "<org.python.modules.jffi.CType$Array: org.python.core.PyObject Array_new(org.python.core.PyNewWrapper,boolean,org.python.core.PyType,org.python.core.PyObject[],java.lang.String[])> with actual argTypes: [org.python.modules.jffi.CType$Array$exposed___new__, boolean, org.python.core.PyType, org.python.core.PyObject[], java.lang.String[]] and taint: [false, true, false, false, false, false]",
            "<org.python.modules.jffi.CType$Array: void <init>(org.python.core.PyType,org.python.modules.jffi.CType,int)> with actual argTypes: [org.python.core.PyType, org.python.modules.jffi.CType, int] and taint: [false, false, false, false]",
            "<com.kenai.jffi.Array: void <init>(com.kenai.jffi.Type,int)> with actual argTypes: [com.kenai.jffi.Type, int] and taint: [false, false, false]",
            "<com.kenai.jffi.Aggregate: void <init>(com.kenai.jffi.Foreign,long)> with actual argTypes: [com.kenai.jffi.Foreign, long] and taint: [false, false, false]",
            "<com.kenai.jffi.internal.Cleaner: java.lang.Runnable register(java.lang.Object,java.lang.Runnable)> with actual argTypes: [com.kenai.jffi.Aggregate, com.kenai.jffi.Aggregate$1] and taint: [false, false, false]",
            "<com.kenai.jffi.internal.Cleaner: java.lang.Object getCleaner(java.lang.Object,java.lang.Runnable)> with actual argTypes: [java.lang.Object, java.lang.Runnable] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.python.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.bouncycastle.asn1.ASN1InputStream: org.python.bouncycastle.asn1.ASN1Primitive readObject()> with actual argTypes: [] and taint: [false]",
            "<java.io.FilterInputStream: int read()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.ConsoleInputStream: int read()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.ConsoleInputStream: void fillBuffer()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.JLineConsole$Stream: java.lang.CharSequence getLine()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.JLineConsole: java.lang.String access$100(org.python.util.JLineConsole,java.lang.String)> with actual argTypes: [org.python.util.JLineConsole, java.lang.String] and taint: [false, false, false]",
            "<org.python.util.JLineConsole: java.lang.String readerReadLine(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<org.python.jline.UnixTerminal: void init()> with actual argTypes: [] and taint: [false]",
            "<org.python.jline.UnixTerminal: void parseInfoCmp()> with actual argTypes: [] and taint: [false]",
            "<org.python.jline.internal.InfoCmp: java.lang.String getInfoCmp(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<java.lang.ProcessBuilder: void <init>(java.lang.String[])> with actual argTypes: [java.lang.String[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.WrappedIterIterator: boolean hasNext()> with actual argTypes: [] and taint: [true]",
            "<org.python.modules.itertools.groupby$1: org.python.core.PyObject __iternext__()> with actual argTypes: [] and taint: [true]",
            "<org.python.core.BuiltinFunctions: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, true]",
            "<org.python.core.__builtin__: org.python.core.PyObject reload(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [false, true]",
            "<org.python.core.__builtin__: org.python.core.PyObject reload(org.python.core.PyModule)> with actual argTypes: [org.python.core.PyModule] and taint: [false, true]",
            "<org.python.core.imp: org.python.core.PyObject reload(org.python.core.PyModule)> with actual argTypes: [org.python.core.PyModule] and taint: [false, true]",
            "<org.python.core.imp: org.python.core.PyObject _reload(org.python.core.PyModule,org.python.core.PyObject,java.util.Map)> with actual argTypes: [org.python.core.PyModule, org.python.core.PyObject, java.util.Map] and taint: [false, true, false, false]",
            "<org.python.core.imp: org.python.core.PyObject find_module(java.lang.String,java.lang.String,org.python.core.PyList)> with actual argTypes: [java.lang.String, java.lang.String, org.python.core.PyList] and taint: [false, true, true, true]",
            "<org.python.core.imp: org.python.core.PyObject loadFromSource(org.python.core.PySystemState,java.lang.String,java.lang.String,java.lang.String)> with actual argTypes: [org.python.core.PySystemState, java.lang.String, java.lang.String, java.lang.String] and taint: [false, false, true, true, true]",
            "<org.python.core.imp: org.python.core.PyObject createFromSource(java.lang.String,java.io.InputStream,java.lang.String,java.lang.String,long)> with actual argTypes: [java.lang.String, java.io.InputStream, java.lang.String, java.lang.String, long] and taint: [false, true, false, false, false, false]",
            "<org.python.core.imp: java.lang.String cacheCompiledSource(java.lang.String,java.lang.String,byte[])> with actual argTypes: [java.lang.String, java.lang.String, byte[]] and taint: [false, false, false, true]",
            "<java.io.FileOutputStream: void <init>(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeClose(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.handler.codec.compression.Lz4FrameEncoder: void close(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.handler.codec.compression.Lz4FrameEncoder: org.python.netty.channel.ChannelFuture finishEncode(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.handler.codec.compression.Lz4FrameEncoder: void flushBufferedData(org.python.netty.buffer.ByteBuf)> with actual argTypes: [org.python.netty.buffer.ByteBuf] and taint: [true, true]",
            "<org.python.netty.handler.codec.compression.ByteBufChecksum$ReflectiveByteBufChecksum: void update(org.python.netty.buffer.ByteBuf,int,int)> with actual argTypes: [org.python.netty.buffer.ByteBuf, int, int] and taint: [true, true, true, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.util.zip.Checksum, java.lang.Object[]] and taint: [true, true, true]"
        ],
        [
            "<javax.management.ImmutableDescriptor: java.lang.Object readResolve()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.comparator.SizeFileComparator: int compare(java.lang.Object,java.lang.Object)> with actual argTypes: [java.lang.String, java.lang.String] and taint: [false, true, true]",
            "<org.python.apache.commons.io.comparator.SizeFileComparator: int compare(java.io.File,java.io.File)> with actual argTypes: [java.io.File, java.io.File] and taint: [false, true, true]",
            "<org.python.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, true]",
            "<org.python.apache.commons.io.function.Uncheck: java.lang.Object get(org.python.apache.commons.io.function.IOSupplier)> with actual argTypes: [org.python.apache.commons.io.function.IOSupplier] and taint: [false, true]",
            "<org.python.apache.commons.io.output.FileWriterWithEncoding$Builder: java.lang.Object get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.output.FileWriterWithEncoding$Builder: org.python.apache.commons.io.output.FileWriterWithEncoding get()> with actual argTypes: [] and taint: [true]",
            "<org.python.apache.commons.io.output.FileWriterWithEncoding: java.io.OutputStreamWriter access$000(java.io.File,java.lang.Object,boolean)> with actual argTypes: [java.io.File, java.lang.Object, boolean] and taint: [false, true, true, true]",
            "<org.python.apache.commons.io.output.FileWriterWithEncoding: java.io.OutputStreamWriter initWriter(java.io.File,java.lang.Object,boolean)> with actual argTypes: [java.io.File, java.lang.Object, boolean] and taint: [false, true, true, true]",
            "<org.python.apache.commons.io.FileUtils: java.io.OutputStream newOutputStream(java.io.File,boolean)> with actual argTypes: [java.io.File, boolean] and taint: [false, true, true]",
            "<org.python.apache.commons.io.file.PathUtils: java.io.OutputStream newOutputStream(java.nio.file.Path,boolean)> with actual argTypes: [java.nio.file.Path, boolean] and taint: [false, true, true]",
            "<org.python.apache.commons.io.file.PathUtils: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.LinkOption[],java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.LinkOption[], java.nio.file.OpenOption[]] and taint: [false, true, false, false]",
            "<java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])> with actual argTypes: [java.nio.file.Path, java.nio.file.OpenOption[]] and taint: [false, true, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeClose(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.handler.ssl.SslHandler: void close(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.handler.ssl.SslHandler: void closeOutboundAndChannel(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise,boolean)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.channel.ChannelPromise, int] and taint: [true, true, true, false]",
            "<org.python.netty.channel.socket.nio.NioDatagramChannel: boolean isActive()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.socket.DefaultDatagramChannelConfig: java.lang.Object getOption(org.python.netty.channel.ChannelOption)> with actual argTypes: [org.python.netty.channel.ChannelOption] and taint: [true, false]",
            "<org.python.netty.channel.socket.nio.NioDatagramChannelConfig: boolean isLoopbackModeDisabled()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.socket.nio.NioDatagramChannelConfig: java.lang.Object getOption0(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.nio.channels.DatagramChannel, java.lang.Object[]] and taint: [false, true, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: boolean safeExecute(org.python.netty.util.concurrent.EventExecutor,java.lang.Runnable,org.python.netty.channel.ChannelPromise,java.lang.Object,boolean)> with actual argTypes: [org.python.netty.util.concurrent.EventExecutor, org.python.netty.channel.AbstractChannelHandlerContext$11, org.python.netty.channel.ChannelPromise, null, int] and taint: [false, true, false, true, false, false]",
            "<org.python.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [false, false]",
            "<org.python.netty.buffer.AbstractReferenceCountedByteBuf: boolean release()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.buffer.AbstractReferenceCountedByteBuf: boolean handleRelease(boolean)> with actual argTypes: [boolean] and taint: [false, false]",
            "<org.python.netty.buffer.UnpooledDirectByteBuf: void deallocate()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.buffer.UnpooledDirectByteBuf: void freeDirect(java.nio.ByteBuffer)> with actual argTypes: [java.nio.ByteBuffer] and taint: [false, false]",
            "<org.python.netty.util.internal.PlatformDependent: void freeDirectBuffer(java.nio.ByteBuffer)> with actual argTypes: [java.nio.ByteBuffer] and taint: [false, false]",
            "<org.python.netty.util.internal.CleanerJava9: void freeDirectBuffer(java.nio.ByteBuffer)> with actual argTypes: [java.nio.ByteBuffer] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [sun.misc.Unsafe, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.python.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.bouncycastle.asn1.ASN1InputStream: org.python.bouncycastle.asn1.ASN1Primitive readObject()> with actual argTypes: [] and taint: [false]",
            "<java.io.FilterInputStream: int read()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.ConsoleInputStream: int read()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.ConsoleInputStream: void fillBuffer()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.JLineConsole$Stream: java.lang.CharSequence getLine()> with actual argTypes: [] and taint: [false]",
            "<org.python.util.JLineConsole: java.lang.String access$100(org.python.util.JLineConsole,java.lang.String)> with actual argTypes: [org.python.util.JLineConsole, java.lang.String] and taint: [false, false, false]",
            "<org.python.util.JLineConsole: java.lang.String readerReadLine(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<org.python.jline.WindowsTerminal: void init()> with actual argTypes: [] and taint: [false]",
            "<org.python.jline.internal.Configuration: boolean getBoolean(java.lang.String,boolean)> with actual argTypes: [java.lang.String, int] and taint: [false, false, false]",
            "<org.python.jline.internal.Configuration: java.lang.String getString(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<org.python.jline.internal.Configuration: java.lang.String getString(java.lang.String,java.lang.String)> with actual argTypes: [java.lang.String, null] and taint: [false, false, false]",
            "<org.python.jline.internal.Configuration: java.util.Properties getProperties()> with actual argTypes: [] and taint: [false]",
            "<org.python.jline.internal.Configuration: java.util.Properties initProperties()> with actual argTypes: [] and taint: [false]",
            "<org.python.jline.internal.Configuration: void loadProperties(java.net.URL,java.util.Properties)> with actual argTypes: [java.net.URL, java.util.Properties] and taint: [false, false, false]",
            "<java.net.URL: java.io.InputStream openStream()> with actual argTypes: [] and taint: [false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeClose(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.handler.codec.compression.JdkZlibEncoder: void close(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.handler.codec.compression.JdkZlibEncoder: org.python.netty.channel.ChannelFuture finishEncode(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.buffer.AbstractByteBuf: org.python.netty.buffer.ByteBuf writeByte(int)> with actual argTypes: [int] and taint: [true, true]",
            "<org.python.netty.buffer.AbstractByteBuf: void ensureWritable0(int)> with actual argTypes: [int] and taint: [true, false]",
            "<org.python.netty.buffer.UnpooledHeapByteBuf: org.python.netty.buffer.ByteBuf capacity(int)> with actual argTypes: [int] and taint: [true, true]",
            "<org.python.netty.buffer.UnpooledUnsafeHeapByteBuf: byte[] allocateArray(int)> with actual argTypes: [int] and taint: [true, true]",
            "<org.python.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)> with actual argTypes: [int] and taint: [false, true]",
            "<org.python.netty.util.internal.PlatformDependent0: byte[] allocateUninitializedArray(int)> with actual argTypes: [int] and taint: [false, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, true]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: boolean safeExecute(org.python.netty.util.concurrent.EventExecutor,java.lang.Runnable,org.python.netty.channel.ChannelPromise,java.lang.Object,boolean)> with actual argTypes: [org.python.netty.util.concurrent.EventExecutor, org.python.netty.channel.AbstractChannelHandlerContext$11, org.python.netty.channel.ChannelPromise, null, int] and taint: [false, true, false, true, false, false]",
            "<org.python.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [false, false]",
            "<org.python.netty.buffer.AbstractReferenceCountedByteBuf: boolean release()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.buffer.AbstractReferenceCountedByteBuf: boolean handleRelease(boolean)> with actual argTypes: [boolean] and taint: [false, false]",
            "<org.python.netty.buffer.UnpooledDirectByteBuf: void deallocate()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.buffer.UnpooledDirectByteBuf: void freeDirect(java.nio.ByteBuffer)> with actual argTypes: [java.nio.ByteBuffer] and taint: [false, false]",
            "<org.python.netty.util.internal.PlatformDependent: void freeDirectBuffer(java.nio.ByteBuffer)> with actual argTypes: [java.nio.ByteBuffer] and taint: [false, false]",
            "<org.python.netty.util.internal.CleanerJava6: void freeDirectBuffer(java.nio.ByteBuffer)> with actual argTypes: [java.nio.ByteBuffer] and taint: [false, false]",
            "<org.python.netty.util.internal.CleanerJava6: void freeDirectBuffer0(java.nio.ByteBuffer)> with actual argTypes: [java.nio.ByteBuffer] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeClose(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.handler.codec.compression.JdkZlibEncoder: void close(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.handler.codec.compression.JdkZlibEncoder: org.python.netty.channel.ChannelFuture finishEncode(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.buffer.AbstractByteBuf: org.python.netty.buffer.ByteBuf writeByte(int)> with actual argTypes: [int] and taint: [true, true]",
            "<org.python.netty.buffer.AbstractByteBuf: void ensureWritable0(int)> with actual argTypes: [int] and taint: [true, false]",
            "<org.python.netty.buffer.UnpooledDirectByteBuf: org.python.netty.buffer.ByteBuf capacity(int)> with actual argTypes: [int] and taint: [true, true]",
            "<org.python.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf: java.nio.ByteBuffer allocateDirect(int)> with actual argTypes: [int] and taint: [true, true]",
            "<org.python.netty.util.internal.PlatformDependent: java.nio.ByteBuffer allocateDirectNoCleaner(int)> with actual argTypes: [int] and taint: [false, true]",
            "<org.python.netty.util.internal.PlatformDependent0: java.nio.ByteBuffer allocateDirectNoCleaner(int)> with actual argTypes: [int] and taint: [false, true]",
            "<org.python.netty.util.internal.PlatformDependent0: java.nio.ByteBuffer newDirectBuffer(long,int)> with actual argTypes: [long, int] and taint: [false, true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, true]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.timeout.IdleStateHandler$AbstractIdleTask: void run()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask: void run(org.python.netty.channel.ChannelHandlerContext)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext] and taint: [true, true]",
            "<org.python.netty.handler.timeout.IdleStateHandler: void channelIdle(org.python.netty.channel.ChannelHandlerContext,org.python.netty.handler.timeout.IdleStateEvent)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.handler.timeout.IdleStateEvent] and taint: [true, true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)> with actual argTypes: [org.python.netty.handler.timeout.IdleStateEvent] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeUserEventTriggered(org.python.netty.channel.AbstractChannelHandlerContext,java.lang.Object)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, java.lang.Object] and taint: [false, true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeUserEventTriggered(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void userEventTriggered(org.python.netty.channel.ChannelHandlerContext,java.lang.Object)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, java.lang.Object] and taint: [true, true, true]",
            "<org.python.netty.handler.ssl.SslHandler: java.lang.String applicationProtocol()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.ssl.JdkAlpnSslEngine: java.lang.String getNegotiatedApplicationProtocol()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.ssl.JdkAlpnSslEngine: java.lang.String getApplicationProtocol()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.ssl.JdkAlpnSslUtils: java.lang.String getApplicationProtocol(javax.net.ssl.SSLEngine)> with actual argTypes: [javax.net.ssl.SSLEngine] and taint: [false, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [javax.net.ssl.SSLEngine, java.lang.Object[]] and taint: [false, true, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.timeout.IdleStateHandler$AbstractIdleTask: void run()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask: void run(org.python.netty.channel.ChannelHandlerContext)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext] and taint: [true, true]",
            "<org.python.netty.handler.timeout.IdleStateHandler: void channelIdle(org.python.netty.channel.ChannelHandlerContext,org.python.netty.handler.timeout.IdleStateEvent)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.handler.timeout.IdleStateEvent] and taint: [true, true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)> with actual argTypes: [org.python.netty.handler.timeout.IdleStateEvent] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeUserEventTriggered(org.python.netty.channel.AbstractChannelHandlerContext,java.lang.Object)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, java.lang.Object] and taint: [false, true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeUserEventTriggered(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void userEventTriggered(org.python.netty.channel.ChannelHandlerContext,java.lang.Object)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, java.lang.Object] and taint: [true, true, true]",
            "<org.python.netty.handler.ssl.SslHandler: java.lang.String applicationProtocol()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.ssl.JdkAlpnSslEngine: java.lang.String getNegotiatedApplicationProtocol()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.ssl.BouncyCastleAlpnSslEngine: java.lang.String getApplicationProtocol()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.String getApplicationProtocol(javax.net.ssl.SSLEngine)> with actual argTypes: [javax.net.ssl.SSLEngine] and taint: [false, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [javax.net.ssl.SSLEngine, java.lang.Object[]] and taint: [false, true, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void run()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: void access$000(org.python.netty.channel.DefaultChannelPipeline,org.python.netty.channel.AbstractChannelHandlerContext)> with actual argTypes: [org.python.netty.channel.DefaultChannelPipeline, org.python.netty.channel.AbstractChannelHandlerContext] and taint: [false, true, true]",
            "<org.python.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(org.python.netty.channel.AbstractChannelHandlerContext)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void callHandlerRemoved()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.codec.ByteToMessageDecoder: void handlerRemoved(org.python.netty.channel.ChannelHandlerContext)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)> with actual argTypes: [org.python.netty.buffer.ByteBuf] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(org.python.netty.channel.AbstractChannelHandlerContext,java.lang.Object)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, java.lang.Object] and taint: [false, true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.handler.codec.MessageToMessageDecoder: void channelRead(org.python.netty.channel.ChannelHandlerContext,java.lang.Object)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, java.lang.Object] and taint: [true, true, true]",
            "<org.python.netty.handler.codec.protobuf.ProtobufDecoderNano: void decode(org.python.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, java.lang.Object, org.python.netty.handler.codec.CodecOutputList] and taint: [true, true, true, false]",
            "<org.python.netty.handler.codec.protobuf.ProtobufDecoderNano: void decode(org.python.netty.channel.ChannelHandlerContext,org.python.netty.buffer.ByteBuf,java.util.List)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.buffer.ByteBuf, java.util.List] and taint: [true, true, true, false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeClose(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.handler.codec.compression.JdkZlibEncoder: void close(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.handler.codec.compression.JdkZlibEncoder: org.python.netty.channel.ChannelFuture finishEncode(org.python.netty.channel.ChannelHandlerContext,org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.channel.ChannelPromise] and taint: [true, true, true]",
            "<org.python.netty.buffer.AbstractByteBufAllocator: org.python.netty.buffer.ByteBuf heapBuffer()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.buffer.AbstractByteBufAllocator: org.python.netty.buffer.ByteBuf heapBuffer(int,int)> with actual argTypes: [int, int] and taint: [true, false, false]",
            "<org.python.netty.buffer.PooledByteBufAllocator: org.python.netty.buffer.ByteBuf newHeapBuffer(int,int)> with actual argTypes: [int, int] and taint: [true, false, false]",
            "<org.python.netty.buffer.PoolArena: org.python.netty.buffer.PooledByteBuf allocate(org.python.netty.buffer.PoolThreadCache,int,int)> with actual argTypes: [org.python.netty.buffer.PoolThreadCache, int, int] and taint: [true, true, false, false]",
            "<org.python.netty.buffer.PoolArena: void allocate(org.python.netty.buffer.PoolThreadCache,org.python.netty.buffer.PooledByteBuf,int)> with actual argTypes: [org.python.netty.buffer.PoolThreadCache, org.python.netty.buffer.PooledByteBuf, int] and taint: [true, true, true, false]",
            "<org.python.netty.buffer.PoolArena: void allocateHuge(org.python.netty.buffer.PooledByteBuf,int)> with actual argTypes: [org.python.netty.buffer.PooledByteBuf, int] and taint: [true, true, true]",
            "<org.python.netty.buffer.PoolArena$DirectArena: org.python.netty.buffer.PoolChunk newUnpooledChunk(int)> with actual argTypes: [int] and taint: [true, true]",
            "<org.python.netty.util.internal.PlatformDependent: java.nio.ByteBuffer alignDirectBuffer(java.nio.ByteBuffer,int)> with actual argTypes: [java.nio.ByteBuffer, int] and taint: [false, true, true]",
            "<org.python.netty.util.internal.PlatformDependent0: java.nio.ByteBuffer alignSlice(java.nio.ByteBuffer,int)> with actual argTypes: [java.nio.ByteBuffer, int] and taint: [false, true, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.nio.ByteBuffer, java.lang.Object[]] and taint: [false, true, true]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void run()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.DefaultChannelPipeline: void access$000(org.python.netty.channel.DefaultChannelPipeline,org.python.netty.channel.AbstractChannelHandlerContext)> with actual argTypes: [org.python.netty.channel.DefaultChannelPipeline, org.python.netty.channel.AbstractChannelHandlerContext] and taint: [false, true, true]",
            "<org.python.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(org.python.netty.channel.AbstractChannelHandlerContext)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void callHandlerRemoved()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.handler.codec.ByteToMessageDecoder: void handlerRemoved(org.python.netty.channel.ChannelHandlerContext)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: org.python.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)> with actual argTypes: [org.python.netty.buffer.ByteBuf] and taint: [true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(org.python.netty.channel.AbstractChannelHandlerContext,java.lang.Object)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, java.lang.Object] and taint: [false, true, true]",
            "<org.python.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: void channelRead(org.python.netty.channel.ChannelHandlerContext,java.lang.Object)> with actual argTypes: [org.python.netty.channel.AbstractChannelHandlerContext, java.lang.Object] and taint: [true, true, true]",
            "<org.python.netty.bootstrap.AbstractBootstrap: void setChannelOptions(org.python.netty.channel.Channel,java.util.Map$Entry[],org.python.netty.util.internal.logging.InternalLogger)> with actual argTypes: [org.python.netty.channel.Channel, java.util.Map$Entry[], org.python.netty.util.internal.logging.InternalLogger] and taint: [false, true, true, false]",
            "<org.python.netty.bootstrap.AbstractBootstrap: void setChannelOption(org.python.netty.channel.Channel,org.python.netty.channel.ChannelOption,java.lang.Object,org.python.netty.util.internal.logging.InternalLogger)> with actual argTypes: [org.python.netty.channel.Channel, org.python.netty.channel.ChannelOption, java.lang.Object, org.python.netty.util.internal.logging.InternalLogger] and taint: [false, true, true, true, false]",
            "<org.python.netty.channel.socket.DefaultDatagramChannelConfig: boolean setOption(org.python.netty.channel.ChannelOption,java.lang.Object)> with actual argTypes: [org.python.netty.channel.ChannelOption, java.lang.Object] and taint: [true, true, true]",
            "<org.python.netty.channel.socket.nio.NioDatagramChannelConfig: org.python.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)> with actual argTypes: [boolean] and taint: [true, true]",
            "<org.python.netty.channel.socket.nio.NioDatagramChannelConfig: void setOption0(java.lang.Object,java.lang.Object)> with actual argTypes: [java.lang.Object, java.lang.Boolean] and taint: [true, false, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.nio.channels.DatagramChannel, java.lang.Object[]] and taint: [false, true, true]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask: void run()> with actual argTypes: [] and taint: [true]",
            "<org.python.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.python.google.common.util.concurrent.AbstractFuture: void complete(org.python.google.common.util.concurrent.AbstractFuture,boolean)> with actual argTypes: [org.python.google.common.util.concurrent.AbstractFuture, int] and taint: [false, false, false]",
            "<org.python.google.common.util.concurrent.AggregateFuture: void afterDone()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.util.concurrent.DefaultPromise: boolean cancel(boolean)> with actual argTypes: [boolean] and taint: [false, false]",
            "<org.python.netty.util.concurrent.DefaultPromise: void notifyListeners()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.util.concurrent.DefaultPromise: void notifyListenersNow()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.util.concurrent.DefaultPromise: void notifyListener0(org.python.netty.util.concurrent.Future,org.python.netty.util.concurrent.GenericFutureListener)> with actual argTypes: [org.python.netty.util.concurrent.DefaultPromise, org.python.netty.util.concurrent.GenericFutureListener] and taint: [false, false, false]",
            "<org.python.netty.channel.pool.SimpleChannelPool$4: void operationComplete(org.python.netty.util.concurrent.Future)> with actual argTypes: [org.python.netty.util.concurrent.Future] and taint: [false, false]",
            "<org.python.netty.channel.pool.SimpleChannelPool: void access$200(org.python.netty.channel.pool.SimpleChannelPool,org.python.netty.util.concurrent.Future,org.python.netty.channel.Channel,org.python.netty.util.concurrent.Promise)> with actual argTypes: [org.python.netty.channel.pool.SimpleChannelPool, org.python.netty.util.concurrent.Future, org.python.netty.channel.Channel, org.python.netty.util.concurrent.Promise] and taint: [false, false, false, false, false]",
            "<org.python.netty.channel.pool.SimpleChannelPool: void notifyHealthCheck(org.python.netty.util.concurrent.Future,org.python.netty.channel.Channel,org.python.netty.util.concurrent.Promise)> with actual argTypes: [org.python.netty.util.concurrent.Future, org.python.netty.channel.Channel, org.python.netty.util.concurrent.Promise] and taint: [false, false, false, false]",
            "<org.python.netty.channel.pool.SimpleChannelPool: org.python.netty.util.concurrent.Future acquireHealthyFromPoolOrNew(org.python.netty.util.concurrent.Promise)> with actual argTypes: [org.python.netty.util.concurrent.Promise] and taint: [false, false]",
            "<org.python.netty.channel.pool.SimpleChannelPool: org.python.netty.channel.ChannelFuture connectChannel(org.python.netty.bootstrap.Bootstrap)> with actual argTypes: [org.python.netty.bootstrap.Bootstrap] and taint: [false, false]",
            "<org.python.netty.bootstrap.Bootstrap: org.python.netty.channel.ChannelFuture connect()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.bootstrap.Bootstrap: org.python.netty.channel.ChannelFuture doResolveAndConnect(java.net.SocketAddress,java.net.SocketAddress)> with actual argTypes: [java.net.SocketAddress, java.net.SocketAddress] and taint: [false, false, false]",
            "<org.python.netty.bootstrap.AbstractBootstrap: org.python.netty.channel.ChannelFuture initAndRegister()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.channel.ReflectiveChannelFactory: org.python.netty.channel.Channel newChannel()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<org.python.google.common.collect.LinkedHashMultimap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.python.netty.channel.group.DefaultChannelGroup: boolean add(org.python.netty.channel.Channel)> with actual argTypes: [org.python.netty.channel.Channel] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: org.python.netty.channel.ChannelFuture close(org.python.netty.channel.ChannelPromise)> with actual argTypes: [org.python.netty.channel.ChannelPromise] and taint: [true, true]",
            "<org.python.netty.channel.embedded.EmbeddedChannel: void runPendingTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.netty.channel.embedded.EmbeddedEventLoop: void runTasks()> with actual argTypes: [] and taint: [true]",
            "<org.python.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask: void run()> with actual argTypes: [] and taint: [true]",
            "<org.python.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.python.google.common.util.concurrent.AbstractFuture: void complete(org.python.google.common.util.concurrent.AbstractFuture,boolean)> with actual argTypes: [org.python.google.common.util.concurrent.AbstractFuture, int] and taint: [false, false, false]",
            "<org.python.google.common.util.concurrent.AggregateFuture: void afterDone()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.util.concurrent.DefaultPromise: boolean cancel(boolean)> with actual argTypes: [boolean] and taint: [false, false]",
            "<org.python.netty.util.concurrent.DefaultPromise: void notifyListeners()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.util.concurrent.DefaultPromise: void notifyListenersNow()> with actual argTypes: [] and taint: [false]",
            "<org.python.netty.util.concurrent.DefaultPromise: void notifyListener0(org.python.netty.util.concurrent.Future,org.python.netty.util.concurrent.GenericFutureListener)> with actual argTypes: [org.python.netty.util.concurrent.DefaultPromise, org.python.netty.util.concurrent.GenericFutureListener] and taint: [false, false, false]",
            "<org.python.netty.handler.ssl.SslClientHelloHandler$1: void operationComplete(org.python.netty.util.concurrent.Future)> with actual argTypes: [org.python.netty.util.concurrent.Future] and taint: [false, false]",
            "<org.python.netty.handler.ssl.AbstractSniHandler: void onLookupComplete(org.python.netty.channel.ChannelHandlerContext,org.python.netty.util.concurrent.Future)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, org.python.netty.util.concurrent.Future] and taint: [false, false, false]",
            "<org.python.netty.handler.ssl.SniHandler: void onLookupComplete(org.python.netty.channel.ChannelHandlerContext,java.lang.String,org.python.netty.util.concurrent.Future)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, java.lang.String, org.python.netty.util.concurrent.Future] and taint: [false, false, false, false]",
            "<org.python.netty.handler.ssl.SniHandler: void replaceHandler(org.python.netty.channel.ChannelHandlerContext,java.lang.String,org.python.netty.handler.ssl.SslContext)> with actual argTypes: [org.python.netty.channel.ChannelHandlerContext, java.lang.String, org.python.netty.handler.ssl.SslContext] and taint: [false, false, false, false]",
            "<org.python.netty.handler.ssl.SniHandler: org.python.netty.handler.ssl.SslHandler newSslHandler(org.python.netty.handler.ssl.SslContext,org.python.netty.buffer.ByteBufAllocator)> with actual argTypes: [org.python.netty.handler.ssl.SslContext, org.python.netty.buffer.ByteBufAllocator] and taint: [false, false, false]",
            "<org.python.netty.handler.ssl.SslContext: org.python.netty.handler.ssl.SslHandler newHandler(org.python.netty.buffer.ByteBufAllocator)> with actual argTypes: [org.python.netty.buffer.ByteBufAllocator] and taint: [false, false]",
            "<org.python.netty.handler.ssl.SslContext: org.python.netty.handler.ssl.SslHandler newHandler(org.python.netty.buffer.ByteBufAllocator,boolean)> with actual argTypes: [org.python.netty.buffer.ByteBufAllocator, boolean] and taint: [false, false, false]",
            "<org.python.netty.handler.ssl.JdkSslContext: javax.net.ssl.SSLEngine newEngine(org.python.netty.buffer.ByteBufAllocator)> with actual argTypes: [org.python.netty.buffer.ByteBufAllocator] and taint: [false, false]",
            "<org.python.netty.handler.ssl.JdkSslContext: javax.net.ssl.SSLEngine configureAndWrapEngine(javax.net.ssl.SSLEngine,org.python.netty.buffer.ByteBufAllocator)> with actual argTypes: [javax.net.ssl.SSLEngine, org.python.netty.buffer.ByteBufAllocator] and taint: [false, false, false]",
            "<org.python.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$AlpnWrapper: javax.net.ssl.SSLEngine wrapSslEngine(javax.net.ssl.SSLEngine,org.python.netty.buffer.ByteBufAllocator,org.python.netty.handler.ssl.JdkApplicationProtocolNegotiator,boolean)> with actual argTypes: [javax.net.ssl.SSLEngine, org.python.netty.buffer.ByteBufAllocator, org.python.netty.handler.ssl.JdkApplicationProtocolNegotiator, boolean] and taint: [false, false, false, false, false]",
            "<org.python.netty.handler.ssl.Conscrypt: boolean isEngineSupported(javax.net.ssl.SSLEngine)> with actual argTypes: [javax.net.ssl.SSLEngine] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [null, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<javax.management.openmbean.TabularDataSupport: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.PyList: java.lang.Object[] toArray(java.lang.Object[])> with actual argTypes: [java.lang.String[]] and taint: [true, false]",
            "<org.python.antlr.op.ModDerived: java.lang.Object __tojava__(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<org.python.modules.zipimport.zipimporter$zipimporter_get_code_exposer: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, false]",
            "<org.python.modules.zipimport.zipimporter: org.python.core.PyObject zipimporter_get_code(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, false]",
            "<org.python.core.util.importer: org.python.core.util.importer$ModuleCodeData getModuleCode(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, false]",
            "<org.python.core.BytecodeLoader: org.python.core.PyCode makeCode(java.lang.String,byte[],java.lang.String)> with actual argTypes: [java.lang.String, byte[], java.lang.String] and taint: [false, true, true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, true]"
        ],
        [
            "<javax.management.openmbean.TabularDataSupport: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.python.core.PyList: java.lang.Object[] toArray(java.lang.Object[])> with actual argTypes: [java.lang.String[]] and taint: [true, false]",
            "<org.python.antlr.op.ModDerived: java.lang.Object __tojava__(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [true, false]",
            "<org.python.modules.zipimport.zipimporter$zipimporter_get_code_exposer: org.python.core.PyObject __call__(org.python.core.PyObject)> with actual argTypes: [org.python.core.PyObject] and taint: [true, false]",
            "<org.python.modules.zipimport.zipimporter: org.python.core.PyObject zipimporter_get_code(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, false]",
            "<org.python.core.util.importer: org.python.core.util.importer$ModuleCodeData getModuleCode(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, false]",
            "<org.python.core.BytecodeLoader: org.python.core.PyCode makeCode(java.lang.String,byte[],java.lang.String)> with actual argTypes: [java.lang.String, byte[], java.lang.String] and taint: [false, true, true, true]",
            "<org.python.core.BytecodeLoader: java.lang.Class makeClass(java.lang.String,byte[],java.lang.Class[])> with actual argTypes: [java.lang.String, byte[], java.lang.Class[]] and taint: [false, true, true, false]",
            "<org.python.core.BytecodeLoader$Loader: java.lang.Class loadClassFromBytes(java.lang.String,byte[])> with actual argTypes: [java.lang.String, byte[]] and taint: [false, true, true]",
            "<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)> with actual argTypes: [java.lang.String, byte[], int, int, java.security.ProtectionDomain] and taint: [false, true, true, false, true, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.python.google.common.util.concurrent.ClosingFuture$CloseableList: void close()> with actual argTypes: [] and taint: [true]",
            "<org.python.google.common.util.concurrent.ClosingFuture: void access$3200(java.lang.AutoCloseable,java.util.concurrent.Executor)> with actual argTypes: [java.lang.AutoCloseable, java.util.concurrent.Executor] and taint: [false, true, true]",
            "<org.python.google.common.util.concurrent.ClosingFuture: void closeQuietly(java.lang.AutoCloseable,java.util.concurrent.Executor)> with actual argTypes: [java.lang.AutoCloseable, java.util.concurrent.Executor] and taint: [false, true, true]",
            "<org.python.google.common.util.concurrent.DirectExecutor: void execute(java.lang.Runnable)> with actual argTypes: [java.lang.Runnable] and taint: [true, true]",
            "<javax.swing.JFormattedTextField$FocusLostHandler: void run()> with actual argTypes: [] and taint: [true]",
            "<javax.swing.JFormattedTextField: void commitEdit()> with actual argTypes: [] and taint: [true]",
            "<javax.swing.text.DefaultFormatter: java.lang.Object stringToValue(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, true]"
        ]
    ]
}