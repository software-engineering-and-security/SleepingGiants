{
    "tabby": [
        [
            "org.sparkproject.jetty.security.authentication.SessionAuthentication#readObject",
            "-[CALL]-> org.sparkproject.jetty.security.LoginService#login -[ALIAS]-> org.sparkproject.jetty.security.AbstractLoginService#login",
            "-[CALL]-> org.sparkproject.jetty.security.AbstractLoginService#loadUserInfo -[ALIAS]-> org.sparkproject.jetty.security.JDBCLoginService#loadUserInfo",
            "-[CALL]-> org.sparkproject.jetty.security.JDBCLoginService#connectDatabase",
            "-[CALL]-> java.sql.DriverManager#getConnection",
            "-[CALL]-> java.sql.DriverManager#getConnection"
        ]
    ],
    "androChain": [
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.server.session.SessionData: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.server.session.SessionData: void deserializeAttributes(org.sparkproject.jetty.server.session.SessionData,java.io.ObjectInputStream)> with actual argTypes: [org.sparkproject.jetty.server.session.SessionData, java.io.ObjectInputStream] and taint: [false, true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void info(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, false, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, true]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, true, false]",
            "<javax.xml.transform.TransformerException: void printStackTrace()> with actual argTypes: [] and taint: [false]",
            "<javax.xml.transform.TransformerException: void printStackTrace(java.io.PrintWriter)> with actual argTypes: [java.io.PrintWriter] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Throwable, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.security.AbstractLoginService: org.sparkproject.jetty.server.UserIdentity login(java.lang.String,java.lang.Object,javax.servlet.ServletRequest)> with actual argTypes: [java.lang.String, java.lang.Object, null] and taint: [false, true, true, false]",
            "<org.sparkproject.jetty.security.JDBCLoginService: org.sparkproject.jetty.security.AbstractLoginService$UserPrincipal loadUserInfo(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void warn(java.lang.String,java.lang.Throwable)> with actual argTypes: [java.lang.String, java.sql.SQLException] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.security.SpnegoLoginService: org.sparkproject.jetty.server.UserIdentity login(java.lang.String,java.lang.Object,javax.servlet.ServletRequest)> with actual argTypes: [java.lang.String, java.lang.Object, null] and taint: [false, true, true, false]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void warn(java.lang.Throwable)> with actual argTypes: [org.ietf.jgss.GSSException] and taint: [false, false]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void warn(java.lang.String,java.lang.Throwable)> with actual argTypes: [java.lang.String, java.lang.Throwable] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.server.AcceptRateLimit: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void warn(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, true, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.thread.Sweeper: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void info(java.lang.String,java.lang.Throwable)> with actual argTypes: [java.lang.String, java.lang.Throwable] and taint: [false, true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, true]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,long)> with actual argTypes: [java.lang.String, long] and taint: [false, true, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, true, false]",
            "<javax.xml.transform.TransformerException: void printStackTrace()> with actual argTypes: [] and taint: [false]",
            "<javax.xml.transform.TransformerException: void printStackTrace(java.io.PrintWriter)> with actual argTypes: [java.io.PrintWriter] and taint: [false, false]",
            "<javax.xml.transform.TransformerException: void printStackTrace(java.io.PrintWriter)> with actual argTypes: [java.io.PrintWriter] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Throwable, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.io.ManagedSelector$Accept: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Throwable)> with actual argTypes: [java.lang.String, java.lang.Throwable] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.log.AbstractLogger: void debug(java.lang.String,long)> with actual argTypes: [java.lang.String, long] and taint: [false, true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.FutureResponseListener: boolean cancel(boolean)> with actual argTypes: [boolean] and taint: [true, true]",
            "<org.sparkproject.jetty.client.HttpRequest: boolean abort(java.lang.Throwable)> with actual argTypes: [java.util.concurrent.CancellationException] and taint: [true, false]",
            "<org.sparkproject.jetty.proxy.ConnectHandler$DownstreamConnection$1: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, false]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Throwable)> with actual argTypes: [java.lang.String, java.lang.Throwable] and taint: [false, true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, true]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.security.AbstractLoginService: org.sparkproject.jetty.server.UserIdentity login(java.lang.String,java.lang.Object,javax.servlet.ServletRequest)> with actual argTypes: [java.lang.String, java.lang.Object, null] and taint: [false, true, true, false]",
            "<org.sparkproject.jetty.plus.security.DataSourceLoginService: org.sparkproject.jetty.security.AbstractLoginService$UserPrincipal loadUserInfo(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.plus.security.DataSourceLoginService: java.sql.Connection getConnection()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.plus.security.DataSourceLoginService: void initDb()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.plus.jndi.NamingEntryUtil: java.lang.Object lookup(java.lang.Object,java.lang.String)> with actual argTypes: [org.sparkproject.jetty.server.Server, java.lang.String] and taint: [false, false, false]",
            "<javax.naming.InitialContext: java.lang.Object lookup(javax.naming.Name)> with actual argTypes: [javax.naming.Name] and taint: [false, false]",
            "<javax.naming.Context: java.lang.Object lookup(javax.naming.Name)> with actual argTypes: [javax.naming.Name] and taint: [false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void notifyEvents()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void onPathWatchEvent(org.sparkproject.jetty.util.PathWatcher$PathWatchEvent)> with actual argTypes: [org.sparkproject.jetty.util.PathWatcher$PathWatchEvent] and taint: [true, true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void loadUsers()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.resource.JarFileResource: boolean exists()> with actual argTypes: [] and taint: [true]",
            "<java.net.URL: java.net.URLConnection openConnection()> with actual argTypes: [] and taint: [false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void notifyEvents()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void onPathWatchEvent(org.sparkproject.jetty.util.PathWatcher$PathWatchEvent)> with actual argTypes: [org.sparkproject.jetty.util.PathWatcher$PathWatchEvent] and taint: [true, true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void loadUsers()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.resource.JarResource: java.io.InputStream getInputStream()> with actual argTypes: [] and taint: [true]",
            "<java.net.URL: java.io.InputStream openStream()> with actual argTypes: [] and taint: [false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.AbstractMessage: boolean equals(java.lang.Object)> with actual argTypes: [java.lang.Class] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessage: java.util.Map getAllFields()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessage: java.util.Map getAllFieldsMutable(boolean)> with actual argTypes: [int] and taint: [true, false]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessage: java.lang.Object getField(org.sparkproject.spark_core.protobuf.Descriptors$FieldDescriptor)> with actual argTypes: [org.sparkproject.spark_core.protobuf.Descriptors$FieldDescriptor] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessage$FieldAccessorTable$RepeatedFieldAccessor: java.lang.Object get(org.sparkproject.spark_core.protobuf.GeneratedMessage)> with actual argTypes: [org.sparkproject.spark_core.protobuf.GeneratedMessage] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessage: java.lang.Object access$1200(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.reflect.Method, org.sparkproject.spark_core.protobuf.GeneratedMessage, java.lang.Object[]] and taint: [false, true, true, false]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessage: java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.reflect.Method, java.lang.Object, java.lang.Object[]] and taint: [false, true, true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.AbstractMessage: boolean equals(java.lang.Object)> with actual argTypes: [java.lang.Class] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageV3: java.util.Map getAllFields()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageV3: java.util.Map getAllFieldsMutable(boolean)> with actual argTypes: [int] and taint: [true, false]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageV3: java.lang.Object getField(org.sparkproject.spark_core.protobuf.Descriptors$FieldDescriptor)> with actual argTypes: [org.sparkproject.spark_core.protobuf.Descriptors$FieldDescriptor] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageV3$FieldAccessorTable$SingularEnumFieldAccessor: java.lang.Object get(org.sparkproject.spark_core.protobuf.GeneratedMessageV3)> with actual argTypes: [org.sparkproject.spark_core.protobuf.GeneratedMessageV3] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageV3: java.lang.Object access$1100(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.reflect.Method, org.sparkproject.spark_core.protobuf.GeneratedMessageV3, java.lang.Object[]] and taint: [false, true, true, false]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageV3: java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.reflect.Method, java.lang.Object, java.lang.Object[]] and taint: [false, true, true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, true, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.server.HttpConnection: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.server.HttpConnection: void onFillable()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.BufferUtil: java.lang.String toDetailString(java.nio.ByteBuffer)> with actual argTypes: [java.nio.ByteBuffer] and taint: [false, true]",
            "<org.sparkproject.jetty.util.BufferUtil: void appendDebugString(java.lang.StringBuilder,java.nio.ByteBuffer)> with actual argTypes: [java.lang.StringBuilder, java.nio.ByteBuffer] and taint: [false, false, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getRootLogger()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.log.Log: void initialized()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.util.concurrent.ConcurrentHashMap: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<ses.ginject.pattern.Caller: int hashCode()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void notifyEvents()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void onPathWatchEvent(org.sparkproject.jetty.util.PathWatcher$PathWatchEvent)> with actual argTypes: [org.sparkproject.jetty.util.PathWatcher$PathWatchEvent] and taint: [true, true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void loadUsers()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.resource.URLResource: boolean exists()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.resource.URLResource: boolean checkConnection()> with actual argTypes: [] and taint: [true]",
            "<java.net.URL: java.net.URLConnection openConnection()> with actual argTypes: [] and taint: [true]"
        ],
        [
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageLite$SerializedForm: java.lang.Object readResolve()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder: org.sparkproject.spark_core.protobuf.MessageLite$Builder mergeFrom(byte[])> with actual argTypes: [byte[]] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder: org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder mergeFrom(byte[])> with actual argTypes: [byte[]] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder: org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder mergeFrom(byte[],int,int)> with actual argTypes: [byte[], int, int] and taint: [true, true, false, true]",
            "<org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder: org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder mergeFrom(org.sparkproject.spark_core.protobuf.CodedInputStream)> with actual argTypes: [org.sparkproject.spark_core.protobuf.CodedInputStream] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.ExtensionRegistryLite: org.sparkproject.spark_core.protobuf.ExtensionRegistryLite getEmptyRegistry()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.spark_core.protobuf.ExtensionRegistryFactory: org.sparkproject.spark_core.protobuf.ExtensionRegistryLite createEmpty()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.spark_core.protobuf.ExtensionRegistryFactory: org.sparkproject.spark_core.protobuf.ExtensionRegistryLite invokeSubclassFactory(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [null, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, false, false]",
            "<javax.xml.transform.TransformerException: void printStackTrace()> with actual argTypes: [] and taint: [false]",
            "<javax.xml.transform.TransformerException: void printStackTrace(java.io.PrintWriter)> with actual argTypes: [java.io.PrintWriter] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Throwable, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, false, false]",
            "<javax.xml.transform.TransformerException: void printStackTrace()> with actual argTypes: [] and taint: [false]",
            "<javax.xml.transform.TransformerException: void printStackTrace(java.io.PrintWriter)> with actual argTypes: [java.io.PrintWriter] and taint: [false, false]",
            "<javax.xml.transform.TransformerException: void printStackTrace(java.io.PrintWriter)> with actual argTypes: [java.io.PrintWriter] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Throwable, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.security.AbstractLoginService: org.sparkproject.jetty.server.UserIdentity login(java.lang.String,java.lang.Object,javax.servlet.ServletRequest)> with actual argTypes: [java.lang.String, java.lang.Object, null] and taint: [false, true, true, false]",
            "<org.sparkproject.jetty.security.AbstractLoginService$UserPrincipal: boolean authenticate(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.sparkproject.jetty.util.security.Credential$Crypt: boolean check(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void warn(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, true, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void ignore(java.lang.Throwable)> with actual argTypes: [java.io.IOException] and taint: [false, false]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Throwable)> with actual argTypes: [java.lang.String, java.lang.Throwable] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<org.sparkproject.jetty.security.authentication.SessionAuthentication: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.security.AbstractLoginService: org.sparkproject.jetty.server.UserIdentity login(java.lang.String,java.lang.Object,javax.servlet.ServletRequest)> with actual argTypes: [java.lang.String, java.lang.Object, null] and taint: [false, true, true, false]",
            "<org.sparkproject.jetty.plus.security.DataSourceLoginService: org.sparkproject.jetty.security.AbstractLoginService$UserPrincipal loadUserInfo(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.plus.security.DataSourceLoginService: java.sql.Connection getConnection()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.plus.security.DataSourceLoginService: void initDb()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.plus.security.DataSourceLoginService: void prepareTables()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Throwable)> with actual argTypes: [java.lang.String, java.sql.SQLException] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.thread.Sweeper: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void info(java.lang.String,java.lang.Throwable)> with actual argTypes: [java.lang.String, java.lang.Throwable] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,long)> with actual argTypes: [java.lang.String, long] and taint: [false, false, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<javax.swing.JFormattedTextField$FocusLostHandler: void run()> with actual argTypes: [] and taint: [true]",
            "<javax.swing.JFormattedTextField: void commitEdit()> with actual argTypes: [] and taint: [true]",
            "<javax.swing.text.DefaultFormatter: java.lang.Object stringToValue(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, true]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.log.AbstractLogger: void debug(java.lang.String,long)> with actual argTypes: [java.lang.String, long] and taint: [false, false, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void debug(java.lang.String,java.lang.Object[])> with actual argTypes: [java.lang.String, java.lang.Object[]] and taint: [false, false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.client.Socks4Proxy$Socks4ProxyConnection: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.Promise$Adapter: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.Log: void initialized()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<java.util.concurrent.ForkJoinTask$AdaptedRunnableAction: void run()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask: java.lang.Object invoke()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask: void reportException(int)> with actual argTypes: [int] and taint: [true, true]",
            "<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, true]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<java.util.concurrent.ForkJoinTask$AdaptedRunnableAction: void run()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask: java.lang.Object invoke()> with actual argTypes: [] and taint: [true]",
            "<java.util.concurrent.ForkJoinTask: void reportException(int)> with actual argTypes: [int] and taint: [true, true]",
            "<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()> with actual argTypes: [] and taint: [true]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.client.Socks4Proxy$Socks4ProxyConnection: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.Promise$Adapter: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.AbstractLogger: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: java.lang.String getName()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.client.Socks4Proxy$Socks4ProxyConnection: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.Promise$Adapter: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.AbstractLogger: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: org.sparkproject.jetty.util.log.Logger newLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, true]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void notifyEvents()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void onPathWatchEvent(org.sparkproject.jetty.util.PathWatcher$PathWatchEvent)> with actual argTypes: [org.sparkproject.jetty.util.PathWatcher$PathWatchEvent] and taint: [true, true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void loadUsers()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.resource.JarFileResource: boolean exists()> with actual argTypes: [] and taint: [true]",
            "<java.net.URL: java.net.URLConnection openConnection()> with actual argTypes: [] and taint: [false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void notifyEvents()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void onPathWatchEvent(org.sparkproject.jetty.util.PathWatcher$PathWatchEvent)> with actual argTypes: [org.sparkproject.jetty.util.PathWatcher$PathWatchEvent] and taint: [true, true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void loadUsers()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.resource.JarResource: java.io.InputStream getInputStream()> with actual argTypes: [] and taint: [true]",
            "<java.net.URL: java.io.InputStream openStream()> with actual argTypes: [] and taint: [false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.client.Socks4Proxy$Socks4ProxyConnection: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.Promise$Adapter: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.Log: void initialized()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.Uptime: long getUptime()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.Uptime$DefaultImpl: long getUptime()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.client.Socks4Proxy$Socks4ProxyConnection: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.Promise$Adapter: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.Log: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.AbstractLogger: org.sparkproject.jetty.util.log.Logger getLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: org.sparkproject.jetty.util.log.Logger newLogger(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, true]",
            "<org.sparkproject.jetty.util.log.LoggerLog: void <init>(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [false, true]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Object, java.lang.Object[]] and taint: [true, true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.DeferredContentProvider: boolean offer(org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk)> with actual argTypes: [org.sparkproject.jetty.client.util.DeferredContentProvider$Chunk] and taint: [true, false]",
            "<org.sparkproject.jetty.util.Callback$6: void failed(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [true, true]",
            "<org.sparkproject.jetty.util.PathWatcher: void run()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.PathWatcher: void notifyEvents()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void onPathWatchEvent(org.sparkproject.jetty.util.PathWatcher$PathWatchEvent)> with actual argTypes: [org.sparkproject.jetty.util.PathWatcher$PathWatchEvent] and taint: [true, true]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void loadUsers()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.resource.URLResource: boolean exists()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.resource.URLResource: boolean checkConnection()> with actual argTypes: [] and taint: [true]",
            "<java.net.URL: java.net.URLConnection openConnection()> with actual argTypes: [] and taint: [true]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.server.Server: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void dumpStdErr()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.AbstractConnectionPool: void dump(java.lang.Appendable,java.lang.String)> with actual argTypes: [java.io.PrintStream, java.lang.String] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.Dumpable: void dumpObjects(java.lang.Appendable,java.lang.String,java.lang.Object,java.lang.Object[])> with actual argTypes: [java.lang.Appendable, java.lang.String, org.sparkproject.jetty.client.AbstractConnectionPool, java.lang.Object[]] and taint: [false, false, false, true, false]",
            "<org.sparkproject.jetty.plus.jndi.NamingDump: void dump(java.lang.Appendable,java.lang.String)> with actual argTypes: [java.lang.Appendable, java.lang.String] and taint: [false, false, false]",
            "<javax.naming.InitialContext: java.lang.Object lookup(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<javax.naming.Context: java.lang.Object lookup(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.security.JDBCLoginService: void doStart()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.preventers.AbstractLeakPreventer: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.preventers.GCThreadLeakPreventer: void prevent(java.lang.ClassLoader)> with actual argTypes: [java.lang.ClassLoader] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [null, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.security.JDBCLoginService: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.security.JDBCLoginService: void doStart()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.server.handler.ShutdownHandler: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.server.handler.ShutdownHandler: void sendShutdown()> with actual argTypes: [] and taint: [false]",
            "<java.net.URL: java.net.URLConnection openConnection()> with actual argTypes: [] and taint: [false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: java.lang.String getClassNameForJsp(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: java.lang.String getNameOfJspClass(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [null, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: java.lang.String getClassNameForJsp(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: java.lang.String getPackageOfJspClass(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> with actual argTypes: [null, java.lang.Object[]] and taint: [false, false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.HttpDestination: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.HttpDestination: void abort(java.lang.Throwable)> with actual argTypes: [java.nio.channels.AsynchronousCloseException] and taint: [true, false]",
            "<org.sparkproject.jetty.client.HttpRequest: boolean abort(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.sparkproject.jetty.client.HttpConversation: boolean abort(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.sparkproject.jetty.client.HttpExchange: boolean abort(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.sparkproject.jetty.client.HttpChannel: boolean abort(org.sparkproject.jetty.client.HttpExchange,java.lang.Throwable,java.lang.Throwable)> with actual argTypes: [org.sparkproject.jetty.client.HttpExchange, java.lang.Throwable, java.lang.Throwable] and taint: [false, false, false, false]",
            "<org.sparkproject.jetty.client.HttpChannel: boolean abortResponse(org.sparkproject.jetty.client.HttpExchange,java.lang.Throwable)> with actual argTypes: [org.sparkproject.jetty.client.HttpExchange, java.lang.Throwable] and taint: [false, false, false]",
            "<org.sparkproject.jetty.client.HttpReceiver: boolean abort(org.sparkproject.jetty.client.HttpExchange,java.lang.Throwable)> with actual argTypes: [org.sparkproject.jetty.client.HttpExchange, java.lang.Throwable] and taint: [false, false, false]",
            "<org.sparkproject.jetty.client.HttpReceiver: void dispose()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.client.HttpReceiver: void cleanup()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.client.HttpReceiver$Decoder: void destroy()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.component.FileDestroyable: void destroy()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.IO: boolean delete(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, false]",
            "<java.io.File: boolean delete()> with actual argTypes: [] and taint: [false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.security.HashLoginService: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void setConfigPath(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<org.sparkproject.jetty.security.PropertyUserStore: void setConfig(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [false, false]",
            "<org.sparkproject.jetty.security.PropertyUserStore: java.nio.file.Path extractPackedFile(org.sparkproject.jetty.util.resource.JarFileResource)> with actual argTypes: [org.sparkproject.jetty.util.resource.JarFileResource] and taint: [false, false]",
            "<java.io.FileOutputStream: void <init>(java.io.File)> with actual argTypes: [java.io.File] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void initialize()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void lambda$initialize$0(org.sparkproject.jetty.util.MultiException,org.sparkproject.jetty.servlet.BaseHolder)> with actual argTypes: [org.sparkproject.jetty.util.MultiException, org.sparkproject.jetty.servlet.BaseHolder] and taint: [false, false, false]",
            "<org.sparkproject.jetty.servlet.FilterHolder: void initialize()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void initialize()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void lambda$initialize$0(org.sparkproject.jetty.util.MultiException,org.sparkproject.jetty.servlet.BaseHolder)> with actual argTypes: [org.sparkproject.jetty.util.MultiException, org.sparkproject.jetty.servlet.BaseHolder] and taint: [false, false, false]",
            "<org.sparkproject.jetty.servlet.FilterHolder: void initialize()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.FilterHolder: void initialize()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageLite$SerializedForm: java.lang.Object readResolve()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder: org.sparkproject.spark_core.protobuf.MessageLite$Builder mergeFrom(byte[])> with actual argTypes: [byte[]] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder: org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder mergeFrom(byte[])> with actual argTypes: [byte[]] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageLite$Builder: org.sparkproject.spark_core.protobuf.AbstractMessageLite$Builder mergeFrom(byte[],int,int)> with actual argTypes: [byte[], int, int] and taint: [true, true, false, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageLite$Builder: org.sparkproject.spark_core.protobuf.GeneratedMessageLite$Builder mergeFrom(byte[],int,int)> with actual argTypes: [byte[], int, int] and taint: [true, true, false, true]",
            "<org.sparkproject.spark_core.protobuf.GeneratedMessageLite$Builder: org.sparkproject.spark_core.protobuf.GeneratedMessageLite$Builder mergeFrom(byte[],int,int,org.sparkproject.spark_core.protobuf.ExtensionRegistryLite)> with actual argTypes: [byte[], int, int, org.sparkproject.spark_core.protobuf.ExtensionRegistryLite] and taint: [true, true, false, true, false]",
            "<org.sparkproject.spark_core.protobuf.MessageSchema: void mergeFrom(java.lang.Object,byte[],int,int,org.sparkproject.spark_core.protobuf.ArrayDecoders$Registers)> with actual argTypes: [org.sparkproject.spark_core.protobuf.GeneratedMessageLite, byte[], int, int, org.sparkproject.spark_core.protobuf.ArrayDecoders$Registers] and taint: [true, true, true, false, true, false]",
            "<org.sparkproject.spark_core.protobuf.MessageSchema: int parseProto2Message(java.lang.Object,byte[],int,int,int,org.sparkproject.spark_core.protobuf.ArrayDecoders$Registers)> with actual argTypes: [java.lang.Object, byte[], int, int, int, org.sparkproject.spark_core.protobuf.ArrayDecoders$Registers] and taint: [true, true, true, false, true, false, false]",
            "<org.sparkproject.spark_core.protobuf.MessageSchema: java.lang.Object filterMapUnknownEnumValues(java.lang.Object,int,java.lang.Object,org.sparkproject.spark_core.protobuf.UnknownFieldSchema,java.lang.Object)> with actual argTypes: [java.lang.Object, int, org.sparkproject.spark_core.protobuf.UnknownFieldSetLite, org.sparkproject.spark_core.protobuf.UnknownFieldSchema, java.lang.Object] and taint: [true, true, true, true, true, true]",
            "<org.sparkproject.spark_core.protobuf.MessageSchema: java.lang.Object filterUnknownEnumMap(int,int,java.util.Map,org.sparkproject.spark_core.protobuf.Internal$EnumVerifier,java.lang.Object,org.sparkproject.spark_core.protobuf.UnknownFieldSchema,java.lang.Object)> with actual argTypes: [int, int, java.util.Map, org.sparkproject.spark_core.protobuf.Internal$EnumVerifier, java.lang.Object, org.sparkproject.spark_core.protobuf.UnknownFieldSchema, java.lang.Object] and taint: [true, true, true, true, true, true, true, true]",
            "<org.sparkproject.spark_core.protobuf.MapEntryLite: void writeTo(org.sparkproject.spark_core.protobuf.CodedOutputStream,org.sparkproject.spark_core.protobuf.MapEntryLite$Metadata,java.lang.Object,java.lang.Object)> with actual argTypes: [org.sparkproject.spark_core.protobuf.CodedOutputStream, org.sparkproject.spark_core.protobuf.MapEntryLite$Metadata, java.lang.Object, java.lang.Object] and taint: [false, true, true, true, true]",
            "<org.sparkproject.spark_core.protobuf.FieldSet: void writeElement(org.sparkproject.spark_core.protobuf.CodedOutputStream,org.sparkproject.spark_core.protobuf.WireFormat$FieldType,int,java.lang.Object)> with actual argTypes: [org.sparkproject.spark_core.protobuf.CodedOutputStream, org.sparkproject.spark_core.protobuf.WireFormat$FieldType, int, java.lang.Object] and taint: [false, true, true, false, true]",
            "<org.sparkproject.spark_core.protobuf.FieldSet: void writeElementNoTag(org.sparkproject.spark_core.protobuf.CodedOutputStream,org.sparkproject.spark_core.protobuf.WireFormat$FieldType,java.lang.Object)> with actual argTypes: [org.sparkproject.spark_core.protobuf.CodedOutputStream, org.sparkproject.spark_core.protobuf.WireFormat$FieldType, java.lang.Object] and taint: [false, true, true, true]",
            "<org.sparkproject.spark_core.protobuf.CodedOutputStream$OutputStreamEncoder: void writeStringNoTag(java.lang.String)> with actual argTypes: [java.lang.String] and taint: [true, true]",
            "<org.sparkproject.spark_core.protobuf.CodedOutputStream$OutputStreamEncoder: void doFlush()> with actual argTypes: [] and taint: [true]",
            "<org.apache.spark.storage.DiskBlockObjectWriter: void write(byte[],int,int)> with actual argTypes: [byte[], int, int] and taint: [true, true, false, true]",
            "<org.apache.spark.storage.DiskBlockObjectWriter: org.apache.spark.storage.DiskBlockObjectWriter open()> with actual argTypes: [] and taint: [true]",
            "<org.apache.spark.storage.DiskBlockObjectWriter: void initialize()> with actual argTypes: [] and taint: [true]",
            "<java.io.FileOutputStream: void <init>(java.io.File,boolean)> with actual argTypes: [java.io.File, int] and taint: [false, true, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.preventers.AbstractLeakPreventer: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.util.preventers.DOMLeakPreventer: void prevent(java.lang.ClassLoader)> with actual argTypes: [java.lang.ClassLoader] and taint: [false, false]",
            "<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()> with actual argTypes: [] and taint: [false]",
            "<javax.xml.parsers.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String)> with actual argTypes: [java.lang.Class, java.lang.String] and taint: [false, false, false]",
            "<javax.xml.parsers.FactoryFinder: java.lang.Object newInstance(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)> with actual argTypes: [java.lang.Class, java.lang.String, null, int] and taint: [false, false, false, false, false]",
            "<javax.xml.parsers.FactoryFinder: java.lang.Object newInstance(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,boolean)> with actual argTypes: [java.lang.Class, java.lang.String, java.lang.ClassLoader, boolean, int] and taint: [false, false, false, false, false, false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void initialize()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void lambda$initialize$0(org.sparkproject.jetty.util.MultiException,org.sparkproject.jetty.servlet.BaseHolder)> with actual argTypes: [org.sparkproject.jetty.util.MultiException, org.sparkproject.jetty.servlet.BaseHolder] and taint: [false, false, false]",
            "<org.sparkproject.jetty.servlet.FilterHolder: void initialize()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.server.handler.ContextHandler$StaticContext: javax.servlet.Filter createFilter(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [false, false]",
            "<org.sparkproject.jetty.server.handler.ContextHandler$StaticContext: java.lang.Object createInstance(java.lang.Class)> with actual argTypes: [java.lang.Class] and taint: [false, false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.LeakTrackingConnectionPool: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.LifeCycle: void stop(java.lang.Object)> with actual argTypes: [org.sparkproject.jetty.client.LeakTrackingConnectionPool] and taint: [false, true]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void stop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStop()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void updateBeans(java.lang.Object[],java.lang.Object[])> with actual argTypes: [org.sparkproject.jetty.servlet.FilterHolder[], org.sparkproject.jetty.servlet.FilterHolder[]] and taint: [true, true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object)> with actual argTypes: [java.lang.Object] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: boolean addBean(java.lang.Object,org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed)> with actual argTypes: [java.lang.Object, org.sparkproject.jetty.util.component.ContainerLifeCycle$Managed] and taint: [true, false, false]",
            "<org.sparkproject.jetty.util.component.ContainerLifeCycle: void start(org.sparkproject.jetty.util.component.LifeCycle)> with actual argTypes: [org.sparkproject.jetty.util.component.LifeCycle] and taint: [true, false]",
            "<org.sparkproject.jetty.util.component.AbstractLifeCycle: void start()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void doStart()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void initialize()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHandler: void lambda$initialize$0(org.sparkproject.jetty.util.MultiException,org.sparkproject.jetty.servlet.BaseHolder)> with actual argTypes: [org.sparkproject.jetty.util.MultiException, org.sparkproject.jetty.servlet.BaseHolder] and taint: [false, false, false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: void initialize()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: void initServlet()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletHolder: javax.servlet.Servlet newInstance()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ],
        [
            "<java.security.Permissions: void readObject(java.io.ObjectInputStream)> with actual argTypes: [java.io.ObjectInputStream] and taint: [true, true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.lang.Object next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.util.MultiPartContentProvider$MultiPartIterator: java.nio.ByteBuffer next()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.util.IO: void close(java.io.Closeable)> with actual argTypes: [java.io.Closeable] and taint: [false, true]",
            "<org.sparkproject.jetty.client.HttpDestination: void close()> with actual argTypes: [] and taint: [true]",
            "<org.sparkproject.jetty.client.HttpDestination: void abort(java.lang.Throwable)> with actual argTypes: [java.nio.channels.AsynchronousCloseException] and taint: [true, false]",
            "<org.sparkproject.jetty.client.HttpRequest: boolean abort(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.sparkproject.jetty.client.HttpConversation: boolean abort(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.sparkproject.jetty.client.HttpExchange: boolean abort(java.lang.Throwable)> with actual argTypes: [java.lang.Throwable] and taint: [false, false]",
            "<org.sparkproject.jetty.client.HttpChannel: boolean abort(org.sparkproject.jetty.client.HttpExchange,java.lang.Throwable,java.lang.Throwable)> with actual argTypes: [org.sparkproject.jetty.client.HttpExchange, java.lang.Throwable, java.lang.Throwable] and taint: [false, false, false, false]",
            "<org.sparkproject.jetty.client.HttpChannel: boolean abortResponse(org.sparkproject.jetty.client.HttpExchange,java.lang.Throwable)> with actual argTypes: [org.sparkproject.jetty.client.HttpExchange, java.lang.Throwable] and taint: [false, false, false]",
            "<org.sparkproject.jetty.client.HttpReceiver: boolean abort(org.sparkproject.jetty.client.HttpExchange,java.lang.Throwable)> with actual argTypes: [org.sparkproject.jetty.client.HttpExchange, java.lang.Throwable] and taint: [false, false, false]",
            "<org.sparkproject.jetty.client.HttpReceiver: void dispose()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.client.HttpReceiver: void cleanup()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.client.HttpReceiver$Decoder: void destroy()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.server.handler.HandlerWrapper: void destroy()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletContextHandler: void setHandler(org.sparkproject.jetty.server.Handler)> with actual argTypes: [null] and taint: [false, false]",
            "<org.sparkproject.jetty.servlet.ServletContextHandler: void setSessionHandler(org.sparkproject.jetty.server.session.SessionHandler)> with actual argTypes: [org.sparkproject.jetty.server.session.SessionHandler] and taint: [false, false]",
            "<org.sparkproject.jetty.servlet.ServletContextHandler: void relinkHandlers()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletContextHandler: org.sparkproject.jetty.security.SecurityHandler getSecurityHandler()> with actual argTypes: [] and taint: [false]",
            "<org.sparkproject.jetty.servlet.ServletContextHandler: org.sparkproject.jetty.security.SecurityHandler newSecurityHandler()> with actual argTypes: [] and taint: [false]",
            "<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> with actual argTypes: [java.lang.Object[]] and taint: [false, false]"
        ]
    ]
}